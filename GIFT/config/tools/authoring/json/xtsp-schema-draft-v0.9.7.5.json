{	"$schema": "http://json-schema.org/draft-07/schema#",	"$id": "https://www.army.mil/ste-tmt-xtsp-draft-v0.9.7.5-json#",	"title": "Experiential Training Support Package (XTSP)",	"description": "A research model for developing a sharable experiential learning session (experience) and specific actor, activity, condition learning events for use with the US Army Synthetic Training Environment training management tools (TMT).  Includes specifications for measures, criteria, and data required to validate competence in a task.  Originally conceived in research conducted for US Navy (2009-2017), then based on US Army TRADOC Pamplet 350-70-1 (TSP reference), and parts of SISO-STD-007-2008 Standard Military Scenario Definition Language (MSDL). 9.7.4: Changed all map coordinates to comply with GeoJSON format.  Made 'anchor' term a point that will serve as an evaluation overlay pivot point.  9.7.4.1: Make measure data sources a pointer to a central array of common data resources (resolution, recording speed, etc...).  Check for compliance with Army public releasable publications.  Still pending final SME review and evaluation.  9.7.4.2: Add various semantic changes as well as format changes to elements like actor, role, equipmentItem, dataSource, taskMeasure, trigger, criteria.  9.7.5: Made changes to general information",	"type": "object",	"properties": {		"Identification": {			"description": "",			"$ref": "#/definitions/genInfo"		},		"Missions": {			"description": "This is a list of assigned orders to be used during experience to support different xEvents",			"type": "array",			"minItems": 1,			"items": {				"$ref": "#/definitions/mission"			},			"additionalItems": true		},		"Environment": {			"description": "This is the overall playable map or real space that an exercise will occur in.  Will consist of three layers consisting of a real-world map, an exericse-based map, and an exercise-based parameters",			"type": "object",			"properties": {				"exerciseMap": {					"$ref": "#/definitions/map"				},				"exerciseEnvironment": {					"$ref": "#/definitions/metoc"				},				"mapObjects": {					"description": "These are moving or fixed objects that will be positioned on the map to supplement xEvents or add realism.  Includes structures like trenches, forts, wrecks, walls, roadblocks and animals or insects, etc....  Also devices like c-wire, IEDs, boxes, fire-pits",					"type": "array",					"items": {						"$ref": "#/definitions/mapObject"					}				}			},			"required": [				"exerciseMap",				"exerciseEnvironment"			],			"additionalProperties": false		},		"Equipment": {			"type": "array",			"items": {				"$ref": "#/definitions/equipmentItem"			},			"additionalItems": false		},		"Actors": {			"description": "These are pre-set AI actors or pre-schedule real actors that are assigned to specific roles in the Force Structure.",			"type": "array",			"items": {				"$ref": "#/definitions/actor"			}		},		"Roles": {			"description": "These are roles that actors are assigned to support teams or units in the Force Structure.",			"type": "array",			"items": {				"$ref": "#/definitions/role"			}		},		"Teams": {			"description": "These are teams assigned to units in the Force Structure.",			"type": "array",			"items": {				"$ref": "#/definitions/team"			}		},		"Units": {			"description": "These are units assigned to a force side organization in the Force Structure.",			"type": "array",			"items": {				"$ref": "#/definitions/unit"			}		},		"ForceSides": {			"description": "The defined players and AI sides of any given exercise that defines the target teams (BLUFOR), opposing teams (OPFOR), neutral teams (NEUFOR), civilian populace, and animal population",			"type": "array",			"items": {				"$ref": "#/definitions/side"			}		},		"Overlays": {			"description": "These are visual indicators used for describing to XDT designer and player mission elements, entity parameters, trigger points and criteria elements.",			"type": "array",			"items": {				"$ref": "#/definitions/overlay"			}		},		"Levels": {			"description": "These are the levels to be used with this xTSP for assigning performance merit.",			"type": "array",			"items": {				"$ref": "#/definitions/level"			}		},		"DataSources": {			"description": "These are the  sources data to measure performance evidence from.",			"type": "array",			"items": {				"$ref": "#/definitions/dataSource"			}		},		"LearningResources": {			"description": "A listing of all learning resources to support each task - crawl and walk phase only",			"type": "array",			"items": {				"$ref": "#/definitions/lrngRsrc"			}		},		"Tasks": {			"description": "These are the tasks that will be formatively or summatively evaluated using various task measures.",			"type": "array",			"items": {				"$ref": "#/definitions/task"			}		},		"TeamSkills": {			"description": "These are the team dimensions that will be formatively or summatively evaluated using various measures.",			"type": "array",			"items": {				"$ref": "#/definitions/teamSkill"			}		},		"Affects": {			"description": "These are the affects that will be formatively and summatively evaluated using various measures.",			"type": "array",			"items": {				"$ref": "#/definitions/affect"			}		},		"TransitionStates": {			"description": "These are the expected transistions that will be used as trigger strategies and activities",			"type": "array",			"items": {				"$ref": "#/definitions/transition"			}		},		"Triggers": {			"description": "A listing of all triggers/types that will be used in the exercise for various functions",			"type": "array",			"items": {				"$ref": "#/definitions/trigger"			}		},		"Strategies": {			"description": "A listing of all pre-defined strategies that need to be read-in and used in the exercise",			"type": "array",			"items": {				"$ref": "#/definitions/strategy"			}		},		"Activities": {			"description": "A listing of all pre-defined activities that need to be used for triggers",			"type": "array",			"items": {				"$ref": "#/definitions/activity"			}		},		"Functions":{			"description": "A listing of all training enviornment defined data functions that are to be activated globally or locally as part of an xevent",			"type": "array",			"items": {				"$ref": "#/definitions/function"			}		},		"XEvents": {			"description": "A listing of all experience events that will be used in the exercise to prompt and measure specific tasks for specific teams / actors",			"type": "array",			"items": {				"$ref": "#/definitions/xEvent"			}		},		"References": {			"description": "A listing of all references supporting this exercise",			"type": "array",			"items": {				"$ref": "#/definitions/reference"			}		}	},	"required": [		"Identification",		"Missions",		"Environment",		"Actors",		"Roles",		"Teams",		"ForceSides",		"Levels",		"References"	],	"additionalProperties": false,	"definitions": {		"genInfo": {			"description": "this is the information that a search engine will look at during exercise query and display.  It also provides administrative information regarding the exercise maintenance and access",			"type": "object",			"properties": {				"experienceId": {					"description": "required: experience unique id (number and/or string)",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"experienceUuid": {					"description": "required: has to be a unique URI based id",					"type": "string"				},				"experienceTitle": {					"description": "required: experience name - doesn't have to be unique if other data is different",					"type": "string"				},				"experienceType": {					"description": "required: type of experience xtsp is designed to support",					"type": "string",					"enum": [						"Tactical Ex Without Troops (TEWT)",						"Staff Exercise (STAFFEX)",						"Command Post Exercise (CPX)",						"Field Training Exercise (FTX)",						"Fire Coordination Exercise (FCX)",						"Combined Arms Live Fire Exercise (CALFEX)",						"Virtual Situational Training Exercise (STX-V)",						"Live Situational Training Exercise (STX)",						"Self-Instruction",						"Knowledge Drill",						"Pre-Live Fire Simulation (PLFS)",						"Gunnery Skills Test (GST)",						"Battle Task / Battle Drills",						"Live-Fire Practice (LFX)",						"Semi-Live Fire Exercise (Practice) (SLFX)",						"Basic Skills Practice (BSP)",						"Demonstration",						"Vicarious Case-Study",						"Direct Skill-Practice",						"Map Exercise",						"Mission readiness Exercise"					]				},				"experienceVersion": {					"description": "required: version of xtsp - note re-use with any key info changes should re-start version to 0",					"type": "number"				},				"schemaVersion": {					"description": "option: XTSP Schema version being used",					"type": "string"				},				"publishState": {					"description": "required: date xtsp was published",					"type": "string",					"enum": [						"Draft",						"Approved",						"UpdateInProgress",						"Deprecated"					]				},				"releaseDate": {					"description": "option: JSON standard being used",					"type": "string",					"format": "date"				},				"securityClass": {					"$ref": "#/definitions/securityClass"				},				"distributionRestriction": {					"description": "option: if UNCLASS, who can have access to this experience",					"type": "string",					"enum": ["Distribution A","Distribution B","Distribution C","Distribution D","Distribution E","Distribution F"],					"default": "Distribution A"				},				"distributionNotice": {					"description": "option: verbiage that is provided with distribution restriction",					"type": "string"				},				"foreignRestriction": {					"description": "option: what export control or foreign restriction applies",					"type": "string"				},				"description": {					"description": "option: summary description of the experience",					"type": "string"				},				"occupation": {					"description": "required: o*net occupation this experience applies to",					"type": "string",					"enum": [						"US Army",						"US Navy",						"US Airforce",						"US Marines",						"US Coast-Guard"					]				},				"occupationDomain": {					"description": "required: domain of the occupation this experience applies to",					"type": "string",					"enum": [						"Ground Forces",						"Science-Medical",						"Aviation-Air Defense",						"Cyber and Signal Analysis"					]				},				"occupationSpecialty": {					"description": "required: occupation specialty experience applies to (proponent, MOS, NEC, OSC...)",					"type": "string",					"enum": [						"Infantry",						"Armor",						"Aviation",						"Intelligence",						"Engineering",						"Military police",						"Quartermaster",						"Transportation",						"Field-artillery",						"Signals",						"Air-defense",						"Ordnance",						"Cyber-security",						"Financial",						"Legal",						"CBRN"					]				},				"organizationType": {					"description": "required: type of occupation domain organization does this experience apply to",					"type": "string",					"enum": [						"rifle-infantry",						"mobilized-infantry",						"ranger-infantry",						"scout & reconnaisance"					]				},				"organizationName": {					"description": "optional: specific organization experience apply to (if only one)",					"type": "string"				},				"organizationEchelon": {					"description": "required: organization echelon the experience apply to",					"type": "string",					"enum": [						"battalion/regiment",						"company",						"platoon",						"section",						"squad",						"team",						"crew",						"role"					]				},				"platformType": {					"description": "optional: platform this xtsp is focused on",					"type": "array",					"items": {						"type": "string",						"enum": [							"M1A1/A2v3 Abrams Tank",							"M2 Bradley AFV",							"M1064A3 Track MCV",							"Stryker ICV",							"Stryker MCV",							"Stryker Recon",							"Stryker CROWS-J",							"Stryker 30mm",							"Stryker MGS",							"Stryker ATGM",							"M1152AX HMMWV",							"Support Truck",							"Scout Vehicle"						]					}				},				"weapons": {					"description": "optional: weapon system an XTSP is focused on",					"type": "array",					"items": {						"type": "string",						"enum": [							"M249 LMG",							"M240 MMG",							"M60 LMG",							"M2A1 HMG",							"MK19 GMG",							"FMG-138 JAV",							"AT4-CS ATW",							"M4/M16 Carb/Rifle",							"M203/320 GL",							"M26 Shotgun",							"M67 Grenade"						]					}				},				"systems": {					"description": "optional: combat or other system this xtsp is focused on",					"type": "array",					"items": {						"type": "string"					}				},				"echelonTeams": {					"description": "optional: echelon teams the experience applies to",					"type": "array",					"items": {						"type": "string"					}				},				"echelonRoles": {					"description": "optional: echelon roles the experience applies to",					"type": "array",					"items": {						"type": "string"					}				},				"competencyFramework": {					"description": "optional: competence framework or METL the experience supports",					"type": "array",					"items": {						"type": "string"					}				},				"competencies": {					"description": "optional: competencies or METs the experience supports",					"type": "array",					"items": {						"type": "string"					}				},				"competenceRequired": {					"description": "option: minimum competence level required to complete experience",					"type": "string",					"enum": [						"novice",						"practiced",						"proficient",						"expert"					]				},				"trainingPhase": {					"description": "required: training phase xtsp applies to",					"type": "string",					"enum": [						"crawl",						"walk",						"run"					]				},				"trainingEnvironment": {					"description": "required: training environment xtsp applies to",					"type": "string",					"enum": [						"VBS (full synthetic)",						"STEELR-RIDE (full synthetic)",						"RVCT-S (full synthetic)",						"RVCT-G (full synthetic)",						"RVCT-A (full synthetic)",						"EST (semi-synthetic)",						"SVT (semi-synthetic)",						"SiVT (semi-live)",						"Collective (LVCIA)",						"Live (ILTE)"					]				},				"difficultyLevel": {					"description": "required: a summary level based on contained x-event terrains, conditions, tasks and activities",					"type": "string",					"enum": [						"Easy",						"Moderate",						"Hard"					]				},				"useNotes": {					"description": "optional: any notes the designer feels need to be passed on to other users",					"oneOf": [						{							"type": "string",							"default": "None"						},						{							"type": "array",							"items": {								"type": "string"							},							"additionalItems": false												}					]				},				"measurementUnits": {					"description": "required: global indicator of measurement unit class",					"type": "string",					"enum": [						"metric",						"english"					],					"default": "metric"				},				"useHistory": {					"description": "required: automated list of training events xtsp has been used in",					"oneOf": [						{							"type": "string",							"default": "None"						},						{							"type": "array",							"items": {								"type": "string"							},							"additionalItems": false												}					]				},				"keywords": {					"description": "optional: keywords that can be used to search for",					"oneOf": [						{							"type": "string"						},						{							"type": "array",							"items": {								"type": "string"							},							"additionalItems": false												}					]				},				"symbol": {					"description": "optional: an icon used to represent XTSP in a GUI",					"$ref": "#/definitions/glyph"				},				"authors": {					"description": "required: point of contact who 'owns' the xtsp",					"type": "array",					"items": {						"$ref": "#/definitions/author"					},					"additionalItems": false				},				"changeHistory": {					"description": "required: list of changes made - automatically done in XDT",					"oneOf": [						{							"type": "string",							"default": "None"						},						{							"type": "array",							"items": {								"$ref": "#/definitions/change"							},							"additionalItems": false												}					]				}			},			"required": [				"experienceId",				"experienceTitle",				"experienceType",				"experienceVersion",				"schemaVersion",				"publishState",				"releaseDate",				"securityClass",				"foreignRestriction",				"distributionRestriction",				"description",				"occupation",				"occupationDomain",				"occupationSpecialty",				"organizationType",				"organizationEchelon",				"trainingPhase",				"trainingEnvironment",				"difficultyLevel",				"measurementUnits",				"useHistory",				"authors",				"changeHistory"			],			"additionalProperties": false		},		"securityClass": {			"description": "a derived classification and declassify date",			"type": "object",			"properties": {				"label": {					"description": "level of classification - UNCLASS = no harm to national security, CUI = possible disclosure to persons without need to know, CONFIDENTIAL = Some harm to national security, SECRET = exceptional harm to national security",					"type": "string",					"enum": [						"UNCLASSIFIED",						"CONTROLLED UNCLASSIFIED",						"CONFIDENTIAL",						"SECRET"					],					"default": "UNCLASSIFIED"				},				"derivedBy": {					"description": "what source is the classification from",					"type": "string",					"default": "Multiple Sources"				},				"declassifyDate": {					"description": "when does classification expire - normally 25 years from date",					"type": "string",					"format": "date"				}			},			"required": [				"label"			],			"additionalProperties": false		},		"author": {			"description": "a person responsible for creating the tsp or xevent",			"type": "object",			"properties": {				"name": {					"type": "string"				},				"role": {					"type": "string"				},				"organization": {					"type": "string"				},				"email": {					"type": "string"				}			},			"required": [				"organization"			],			"additionalProperties": false		},		"change": {			"description": "any changes to the object including initial draft, changes, etc... ",			"type": "object",			"properties": {				"changeDescription": {					"type": "string"				},				"changeDate": {					"type": "string",					"format": "date"				},				"changeAuthor": {					"$ref": "#/definitions/author"				}			},			"required": [				"changeDescription",				"changeDate",				"changeAuthor"			],			"additionalProperties": false		},		"reference": {			"description": "references used as authoritative sources for exercise components... can document down to page and paragraph.",			"type": "object",			"properties": {				"referenceId": {					"description": "optional: referece unique id",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"referenceUuid": {					"type": "string"				},				"referenceTitle": {					"type": "string"				},				"referenceNumber": {					"type": "string"				},				"referenceAuthor": {					"$ref": "#/definitions/author"				},				"publishDate": {					"type": "string",					"format": "date"				},				"fileType": {					"type": "string",					"enum": [						".html",						".pdf",						".txt",						".doc",						".xml",						".json"					]				},				"referencePublisher": {					"type": "string"				},				"refChapPagePara": {					"type": "string"				}			},			"required": [				"referenceId",				"referenceTitle",				"publishDate",				"fileType"			],			"additionalProperties": false		},		"mgrsCoordinate": {			"description": "A Military Grid Reference System (MGRS), based on Universal Transverse Mercator (UTM) standard grid system.  Used mostly by military, first responders and on some US topographical maps.  An MGRS grid reference (e.g., 4QFJ12345678) consist of three-parts: the grid zone designator (4Q), 100km square identifier (FJ) and a easting/northing number set with precision.  Used to support the reading of a location on a military map from ansouthwest corner of the selected map grid.",			"type": "object",			"properties": {				"utmGridSquare": {					"description": "optional: a 100km grid square within each grid zone, given a two capital letter designations.  First letter is representing the latitude square, the second letter represents the longitudinal square.",					"type": "string",					"pattern": "[AZ]"				},				"mgrsEasting": {					"description": "required: measured eastward in meters from a 'false datum' at the southwest corner of a selected map grid box.  Cross-fixed with northing measure to define a point in a grid",					"type": "integer",					"minimum": 0,					"maximum": 99999				},				"mgrsNorthing": {					"description": "required: measured northward in meters from a 'false datum' at the southwest corner of a selected map grid box.  Cross-fixed with easting measure to define a point in a grid",					"type": "integer",					"minimum": 0,					"maximum": 99999				},				"mgrsPrecision": {					"description": "required: the precision of a grid scale at a given side at 10km, 1km, 100m, 10m, 1m.   Each of these distances are represented by an even number representing the truncated max number of digits: 2, 4, 6, 8, 10, respectively",					"type": "integer",					"minimum": 2,					"maximum": 5				},				"elevationAGL": {					"description": "optional: height above ground level (AGL) at a given point in meters",					"type": "integer",					"minimum": 0,					"maximum": 8850				}			},			"required": [					"utmGridSquare",					"mgrsEasting",					"mgrsNorthing"			],			"additionalProperties": false		},		"latitude": {			"description": "set in decimal degrees",			"minimum": -90,			"maximum": 90,			"type": "number",			"default": 0		},		"longitude": {			"description": "set in decimal degrees",			"minimum": -180,			"maximum": 180,			"type": "number",			"default": 0		},		"altitude": {			"description": "set in meters",			"minimum": -11000,			"maximum": 8850,			"type": "number",			"default": 0		},		"coordinate": {			"description": "Geodectic coordinate used to support the placement of physical entities or overlays in a real-world physical place using a decimal-degrees format",			"type": "array",			"minItems": 2,			"maxItems": 3,			"items": [				{					"#ref": "/definitions/latitude"				},				{					"#ref": "/definitions/longitude"				},				{					"#ref": "/definitions/altitude"				}			],			"additionalItems": false		},		"coordinate2": {			"description": "Alternate: Geodectic coordinate used to support the placement of physical entities or overlays in a real-world physical place using a decimal-degrees format",			"type": "object",			"properties": {				"coordinate": {					"type": "object",					"properties": {						"lat": {							"#ref": "/definitions/latitude"						},						"long": {							"#ref": "/definitions/longitude"						},						"alt": {							"#ref": "/definitions/altitude"						}					},					"additionalProperties": false,					"required": [						"lat",						"long",						"alt"					]				}			},			"additionalProperties": false,			"required": [				"coordinate"			]		},		"gcc": {			"description": "Geocentric coordinate used to support the rendering engine in tracking, positioning and/or vectoring entities and entity rays",			"type": "array",			"minItems": 3,			"items": [				{					"type": "number"				},				{					"type": "number"				},				{					"type": "number"				}			],			"additionalItems": false		},		"gcc2": {			"description": "Alternate: Geocentric coordinate used to support the rendering engine in tracking, positioning and/or vectoring entities and entity rays",			"type": "object",			"properties": {				"gccCoord": {					"type": "object",					"properties": {						"x": {							"#ref": "/definitions/latitude"						},						"y": {							"#ref": "/definitions/longitude"						},						"z": {							"#ref": "/definitions/altitude"						}					},					"additionalProperties": false,					"required": [						"x",						"y",						"z"					]				}			},			"additionalProperties": false,			"required": [				"gccCoord"			]		},		"coordSystemDatum": {			"description": "a single geodectic coordinate ref point gcc coordinates are calibrated to",			"name": {				"type": "string"			},			"datum": {				"$ref": "#/definitions/coordinate"			},			"required": [				"datum"			]		},		"azimuth": {			"description": "degree of facing/moving direction, relative to geographic north, in a real or synthetic space, set in decimal degrees",			"type": "number",			"minimum": 0,			"maximum": 360,			"default": 0		},		"pitch": {			"description": "degree of rotation, around a horizontal axis, facing a given direction, set in decimal degrees",			"type": "number",			"minimum": -180,			"maximum": 180,			"default": 0		},		"roll": {			"description": "degree of rotation around a horizontal axis, from 0, perpendicular from a given direction, set in decimal degrees",			"type": "number",			"minimum": -180,			"maximum": 180,			"default": 0		},		"yaw": {			"description": "degree of twist around a vertical axis, from an original direction, set in decimal degrees",			"type": "number",			"minimum": -180,			"maximum": 180,			"default": 0		},		"vectorCoordinate": {			"description": "Vector coordinate used to support the direction of items from a fixed geographic axis coordinate or gcc.  Used for eyes, head, body parts, weapons, sensors, vehicles, aircraft or vessels.  Uses azimuth (direction), pitch(tilt), roll(tilt), yaw (twist)",			"type": "array",			"minItems": 4,			"items": {				"$ref": "#/definitions/azimuth",				"$ref": "#/definitions/pitch",				"$ref": "#/definitions/roll",				"$ref": "#/definitions/yaw"			},			"additionalItems": false		},		"terrainType": {			"description": "a type of terrain to characterize a map",			"type": "string",			"enum": [				"desert", 				"mountain", 				"jungle",				"arctic", 				"forest", 				"plains", 				"swamp",				"valley", 				"rocky", 				"hills", 				"rural-urban", 				"city-urban"			]		},		"featureType": {			"description": "features on a map based on terrain - used as part of an OCOKA analysis",			"type": "object",			"properties": {				"featureName": {					"type": "string",					"enum": [						"hill",						"ridge",						"valley",						"saddle",						"depression",						"draw",						"spur",						"cliff",						"lake",						"pond",						"river",						"creek",						"ford"					]				},				"shape": {					"type": "string",					"enum": [						"Point",						"Polygon",						"LineString",						"Circle",						"MultiLineString",						"MultiPolygon"					]				},				"coordinates": {					"description": "used to represent a terrain feature using a point, line or polygon",					"type": "array",					"items": {						"$ref": "#/definitions/coordinate"					},					"additionalItems": false				}			},			"required": [				"featureName",				"mapArea"			],			"additionalProperties": false		},		"metoc": {			"description": "the real or synthetic environmental parameters for the exercise map, based on the real geographic location, altitude, season and time of day.  Ideally will draw from historical data and randomized air-pressure systems.  These variables can be set dynamically by rendering engine during design but must be based on modeled data from other settings like location, season, sun or moon data, etc.  Can include other non-natural elements such as smoke and CBRN levels.  Can get much of this data from sites like http://www.worldweatheronline.com",			"type": "object",			"properties": {				"dataTime": {					"description": "required: date (season) at exercise start",					"type": "string",					"format": "date-time"				},				"magneticDeclination": {					"description": "optional: magnetic offset of magnetic true north",					"type": "number"				},				"atmosphere": {					"description": "atmospheric moisture in percent of atmospheric capacity",					"type": "object",					"properties": {						"temperature": {							"description": "required: celsius",							"type": "number",							"minimum": -273.2,							"maximum": 9999.9						},						"humidity": {							"description": "optional: ratio",							"type": "integer",							"minimum": 0,							"maximum": 100						},						"baroPressure": {							"description": "optional: millibars",							"type": "integer"						},						"inversionLayer": {							"description": "optional: height in meters",							"type": "integer"						},						"cbrn": {							"description": "required: if chemical, biologic, radiation, nuclear contamination is in the atmospher",							"type": "boolean",							"default": false						}					},					"additionalProperties": false,					"required": [						"temperature",						"humidity",						"baroPressure"					]				},				"cloudCover": {					"description": "density of clouds",					"cloudLevel": {						"description": "optional: height layer of clouds",						"type": "string",						"enum": ["low","medium","high"]					},					"height": {						"description": "optional: height of clouds in meters",						"type": "number",						"minimum": 1					},					"coverage": {						"description": "required: density of clouds in octas: 0 = no clouds, 8 = complete cloud cover",						"type": "integer",						"minimum": 0,						"maximum": 8					}				},				"icing": {					"type": "string",					"enum": ["none","light","moderate","severe"]				},				"light": {					"description": "degree of light in environment that impacts visibility",					"type": "object",					"properties": {						"lightType": {							"description": "optional: height layer of clouds",							"type": "string",							"enum": ["sun","moon","urban"]						},						"moonCategory": {							"description": "optional: moon shape",							"type": "string",							"enum": ["full","new","half","quarter"]						},						"sunrise": {							"description": "optional: map location sunrise time",							"type": "string",							"format": "time"						},						"sunset": {							"description": "optional: map location sunset time",							"type": "string",							"format": "time"						},						"moonrise": {							"description": "optional: map location moonrise time",							"type": "string",							"format": "time"						},						"moonset": {							"description": "optional: map location moonset time",							"type": "string",							"format": "time"						}					},					"additionalProperties": false,					"required": [						"lightType"					]				},				"precipitation": {					"description": "optional: type of precipitation",					"type": "object",					"properties": {						"precipType": {							"description": "required: type of precipitation",							"type": "string",							"enum": ["none","rain","drizle","freeze rain","hail","sleet","snow"]						},						"precipRate": {							"description": "required: rate of precipitation in millimeters/hour",							"type": "integer",							"minimum": 0,							"maximum": 150						}					},					"additionalProperties": false,					"required": [						"precipType"					]				},				"visibilityRange": {					"description": "range / ability to identify an object measured in meters",					"type": "integer",					"minimum": 0,					"maximum": 20000				},				"windDirection": {					"description": "required: direction wind is blowing on average - measured in degrees",					"type": "integer",					"minimum": 0,					"maximum": 359				},				"windSpeed": {					"description": "required: average speed of wind - measured in meters/sec",					"type": "integer",					"minimum": 0,					"maximum": 100				}			},			"required": [				"dataTime",				"atmosphere",				"light",				"visibilityRange",				"windDirection",				"windSpeed"			],			"additionalProperties": true		},		"weatherObject": {			"type": "object",			"properties": {				"reportDate": {					"type": "string",					"format": "date"				},				"sunriseTime": {					"description": "begin morning nautical time (BMNT)",					"type": "string",					"format": "time"				},				"sunsetTime": {					"description": "evening nautical time",					"type": "string",					"format": "time"				},				"cloudCover": {					"type": "string",					"enum": [						"None",						"Partly",						"Full"					]				},				"visualRange": {					"description": "'Runway Visual Range' measured in meters (m)",					"type": "number"				},				"nightVisionRange": {					"description": "NVG range measured in meters (m)",					"type": "number"				},				"infraredRange": {					"description": "FLIR range measured in meters (m)",					"type": "number"				},				"laserRange": {					"description": "measured in meters (m)",					"type": "number"				},				"wind": {					"description": "measured in true azimuth and knots kts",					"type": "string"				},				"precipitation": {					"description": "modeled probability measured in percentage (%)",					"type": "integer"				},				"precipType": {					"type": "string",					"enum": [						"None",						"Fog",						"Drizzle",						"Rain",						"Sleet",						"Freezing Rain",						"Snow"					]				},				"surfDustConcentration": {					"description": "measured in milligrams per cubic meter (Mg/M3)",					"type": "number"				},				"highTemp": {					"description": "measured in celcius (c)",					"type": "object",					"properties": {						"value": {							"type": "number"						},						"time": {							"type": "string",							"format": "time"						}					},					"additionalProperties": false				},				"lowTemp": {					"description": "measured in celcius (c)",					"type": "object",					"properties": {						"value": {							"type": "number"						},						"time": {							"type": "string",							"format": "time"						}					},					"additionalProperties": false				},				"humidity": {					"type": "integer"				}			},			"additionalProperties": false,			"required": [				"reportDate",				"sunriseTime",				"sunsetTime",				"visualRange",				"wind",				"precipitation",				"highTemp",				"lowTemp",				"humidity"			]					},		"geoArea": {			"areaDesignation": {				"description": "optional: a name for a geo area",				"type": "string"			},			"utmGridZone": {				"description": "optional: a grid of rectangles around the earth, with a two capital letter designations.  First letter is representing an 8-12 degree latitude band, with degrees increasing with relative distance from equator.  Second letter represents 1 of 60, 6-degree longitudinal bands around the earth.",				"type": "string",				"pattern": "[AZ]"			},			"upperRight": {				"description": "option: northeast corner of area",				"$ref": "#/definitions/coordinate"			},											"lowerLeft": {				"description": "option: southwest corner of area",				"$ref": "#/definitions/coordinate"			},										"areaTerrainType": {				"description": "required: the types of terrain in the area",				"type": "array",				"minitem": 1,				"items": {					"$ref": "#/definitions/terrainType"				},				"additionalItems": false			},											"areaFeatures": {				"description": "optional: an array of terrain features in the area.  These are used in the mission situation when describing the operating area",				"type": "array",				"minItems": 1,				"items": {					"$ref": "#/definitions/featureType"				}			},			"required": [				"upperRight",				"lowerLeft",				"areaTerrainType"			]									},				"map": {			"description": "describes the real-world physical location a synthetic map is representing - used to filter and translate real-world sensor data to synthetic environment e.g., SiVT",			"type": "object",			"properties": {				"mapId": {					"description": "required: unique global id for a given real space",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"mapUuid": {					"type": "string"				},				"mapName": {					"type": "string"				},				"region": {					"description": "required: name of a general region / continent / ocean / sea an area is within",					"type": "string"				},				"country": {					"description": "required: name of a sovereign country / territory an area is within",					"type": "string"				},				"facility": {					"description": "optional: name of a facility area is within",					"type": "string"				},				"dwelling": {					"description": "optional: name of a building an area is within",					"type": "string"				},				"areaOfInterest": {					"description": "optional: any designated geographic area",					"$ref": "#/definitions/geoArea"				},				"coordSystemDatum": {					"description": "required: establishes the GDC reference point for GCC points to work from.",					"$ref": "#/definitions/coordSystemDatum"				},				"utmGridZone": {					"description": "required: a grid of rectangles around the earth, with a two capital letter designations.  First letter is representing an 8-12 degree latitude band, with degrees increasing with relative distance from equator.  Second letter represents 1 of 60, 6-degree longitudinal bands around the earth.",					"type": "string"				},				"utmGridSquare": {					"description": "optional: a 100km grid Square are within each grid zone, given a two capital letter designations.  First letter is representing the latitude square, the second letter represents the longitudinal square.",					"type": "string"				}			},			"required": [				"mapId",				"region",				"country",				"areaOfInterest",				"coordSystemDatum"			],			"additionalProperties": false		},		"3dModel": {			"description": "describes the on-map 3D model associated with an actor, vehicle, equipment or map object",			"type": "object",			"properties": {				"melId": {					"description": "required: mel ID given to the entity 3D model",					"type": "string"				},				"melCategory": {					"type": "string"				},				"visualModelName": {					"description": "required: visual model name given to the entity 3D model",					"type": "string"				},				"epmModelName": {					"description": "optional: gen 1 epm name given to the entity 3D model",					"type": "string"				},				"secoreModelName": {					"description": "required: gen 2 SECcore name given to the entity 3D model",					"type": "string"				},				"vbsModelName": {					"description": "optional: Bohemia name given to the entity 3D model",					"type": "string"				}			},			"required": [				"melId"			],			"additionalProperties": false		},		"mapObject": {			"description": "this is any static object that is non terrain and is added to the battlespace map as part of the environment like a trench, wire, fortification, wall, wrecks, trashpile, animals, etc...",			"type": "object",			"properties": {				"mapObjId": {					"description": "required: exercise unique map object id",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"mapObjName": {					"type": "string"				},				"mapObjType": {					"type": "string",					"enum": [						"building",						"barrier",						"wreck",						"fortification",						"fencing",						"signs",						"explosive",						"animal"					]				},				"mapObjLocation": {					"$ref": "#/definitions/coordinate"				},				"mapObjModel": {					"$ref": "#/definitions/3dModel"				},				"scale": {					"type": "number"				},				"azimuthDirection": {					"type": "number"				},				"altitudeOffset": {					"type": "number"				},				"visualState": {					"type": "string"				},				"smoke": {					"type": "boolean",					"default": false				},				"smokeDegree": {					"type": "number"				},				"fire": {					"type": "boolean",					"default": false				},				"fireType": {					"type": "string",					"enum": [						"alpha",						"bravo",						"charlie",						"delta"					]				}			},			"required": [				"mapObjId",				"mapObjName",				"mapObjType",				"mapObjLocation",				"mapObjModel",				"scale",				"azimuthDirection",				"altitudeOffset"			],			"additionalProperties": false		},		"tacticalAsset": {			"description": "these are tactical assets like fires support, airstrikes, close air support, UAV, airdrops, medevac",			"type": "object",			"properties": {				"assetId": {					"description": "required: exercise unique tactical asset id",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"assetType": {					"type": "string",					"enum": [						"rapid response team",						"fires",						"airsupport",						"uav",						"airdrop",						"medevac"					]				},				"activities": {					"type": "array",					"items": {						"$ref": "#/definitions/activity"					}				},				"name": {					"type": "string"				},				"callSign": {					"type": "string"				},				"assetLocation": {					"$ref": "#/definitions/mapLocation"				},				"whenAvail": {					"description": "the exercise real-time resource is available",					"type": "object",					"properties": {						"startTime": {							"type": "number"						},						"stopTime": {							"type": "number"						}					},					"additionalProperties": false				}			},			"required": [				"assetId",				"assetType",				"activateActivities"			],			"additionalProperties": false		},		"mapLocation": {			"description": "one or more coordinate points using a single string or an array of GDC, MGRS or GCC point formats",			"anyOf": [				{"$ref": "#/definitions/coordinate"},				{"$ref": "#/definitions/mgrsCoordinate"},				{"$ref": "#/definitions/gcc"},					{"type": "string"}			]		},		"courseOfAction": {			"type": "object",			"properties": {				"decisionPoint": {					"type": "string"				},				"task": {					"type": "string"				},				"risk": {					"type": "string"				},				"shapingOp": {					"type": "string"				},				"multiplier": {					"type": "string"				}			},			"additionalProperties": true,			"required": [				"task",				"risk",				"decisionPoint"			]		},		"maneuverObject": {			"description": "Required: describes how a unit will maneuver to accomplish its mission and meets the commander's intent. In offensive operations, it specifies the unit's formation, movement technique, routes or avenues of approach, and plans for direct fire and overwatch. In defensive operations, it specifies the unit's engagement plan, battle positions, orientation of weapons, and the plan for movement between positions. It should also include combat identification measures taken by friendly forces. NOTE: Include force protection steps under scheme of maneuver. In peacetime training, a sixth paragraph outlines overall mission safety measures",			"type": "object",			"properties": {				"unitDesignation": {					"type": "string"				},				"assemblyArea": {					"description": "required: overlay that describes the assembly area",					"type": "integer"				},				"departureLine": {					"description": "required: overlay that describes the movement of units",					"type": "integer"				},				"objRallyPoints": {					"description": "option: overlay areas that describes a point on MGRS map where to stage and reorganize units to and from the objective area",					"type": "array",					"minItems": 1,					"items": {						"type": "integer"					}				},				"probLineDeployment": {					"description": "option: overlays that describes a phase line designating location where to deploy unit into assault formation",					"type": "array",					"minItems": 1,					"items": {						"type": "integer"					}				},				"limitOfAdvance": {					"description": "option: during assault, this overlay describes the max limit of advancement",					"type": "integer"				},				"movementOverlay": {					"description": "Required: overlays that describes the main movement path as well as passage points, contact points, checkpoints and CCP of units",					"type": "array",					"minItems": 1,					"items": {						"type": "integer"					}				},				"movementInst": {					"description": "Required: overlays that describes the main movement path as well as passage points, contact points, checkpoints and CCP of units",					"type": "array",					"minItems": 1,					"items": {						"type": "string"					}				},				"obscuration": {					"description": "Option: description of the means to obscure force movement and maneuver",					"type": "string"				},				"safetyPrecautions": {					"description": "Option: description of precautions to ensure safety of units during movement and maneuver",					"type": "string"				}			},			"additionalProperties": true,			"required": [				"movementInst"			]		},		"mission": {			"description": "These can be Operational, Fragmentary or Warning types.  They drive and provide purpose to an experience.  Format is per FM 6-99",			"type": "object",			"properties": {				"missionId": {					"description": "required: unique mission id - locally assigned",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"missionUuid": {					"type": "string"				},				"orderType": {					"description": "Required: for query to search for specific order type",					"type": "string",					"enum": [						"Operation",						"Fragmentary",						"Warning"					]				},				"dateTime": {					"description": "Required: DTG order is effective - use DDHHMMSSTZMONYR format",					"type": "string",					"format": "date-time"				},				"sendingUnit": {					"description": "Option: unit making order",					"type": "string"				},				"orderNumber": {					"description": "Required: sequence of orders especially warno and frago",					"type": "integer"				},				"timeZone": {					"description": "Option: time zone used for all times - same as DTG",					"type": "string"				},				"reference": {					"description": "Option: only if change: directive or order this order references",					"type": "string"				},				"situation": {					"description": "Required: Provides the current situation that supports the 'why' of an assignment",					"type": "object",					"properties": {						"areaOfInterest": {							"description": "required: describes the operating area location",							"$ref": "#/definitions/geoArea"						},						"intelligence": {							"type": "object",							"properties": {								"weather": {									"description": "Option: describes aspects of weather that could impact operations",									"type": "array",									"minItems": 1,									"items": {										"$ref": "#/definitions/weatherObject"									},									"additionalItems":false								},								"opposingForces": {									"description": "Required: describes enemy type, size, disposition",									"type": "object",									"properties": {										"country": {											"type": "string"										},										"command": {											"type": "string"										},										"unitType": {											"type": "string"										},										"size": {											"type": "string"										},										"descriptiveFeatures": {											"type": "string"										},										"background": {											"type": "string"										},										"mission": {											"type": "string"										},										"equipment": {											"type": "string"										},										"vehicles": {											"type": "string"										},										"fireSupport": {											"type": "string"										},										"sensorSupport": {											"type": "string"										},										"competenceMorale": {											"type": "string"										},										"location": {											"type": "string"										},										"weaknessesVulnerables": {											"type": "string"										},										"coursesOfAction": {											"type": "array",											"minItem": 1,											"items": {												"type": "string"											},											"additionalItems": false										},										"highInterestObject": {											"description": "an OPFOR person, object or place to make contact with and related to mission",											"type": "string"										}									}								},								"civilConsiderations": {									"description": "option: describes civil factors - if any/known",									"type": "object",									"properties": {										"rulesInteraction": {											"type": "string"										},										"epwProcedures": {											"type": "string"										},										"civilContacts": {											"type": "string"										},										"civilNorms": {											"type": "string"										},										"civilAffiliations": {											"type": "string"										},										"civilResources": {											"type": "string"										},										"civilThreatRisks": {											"type": "string"										}									}								}							},							"additionalProperties": false,							"required": [								"weather",								"opposingForces",								"civilConsiderations"							]													},						"friendlyForces": {								"description": "option: describes force command, adjacent units",							"type": "object",							"properties": {								"highHQDesignation": {									"description": "this is HQ two echelons up",									"type": "string"								},								"highHQMission": {									"type": "string"								},								"highHQIntent": {									"type": "string"								},								"hqDesignation": {									"description": "this is HQ one echelon up",									"type": "string"								},								"hqMission": {									"type": "string"								},								"hqIntent": {									"type": "string"								},								"adjacentUnitsMissions": {									"type": "array",									"minItem": 1,									"items": {											"designation": {												"type": "string"											},											"location": {												"$ref": "#/definitions/mapLocation"											},											"mission":	{												"type": "string"											}									},									"additionalItems": false								}							}						},						"nonDODForcesTasks": {							"description": "option: describes non DOD controlled forces/units in area and tasking or mission",							"type": "array",							"minItem": 1,							"items": {									"nonDODForce": {										"type": "string"									},									"Task":	{										"type": "string"									}							},							"additionalItems": false						},						"attachedExternalUnits": {							"description": "option: describes available or attached external units",							"type": "array",							"minItem": 1,							"items": {									"type": "string"							},							"additionalItems": false						},						"detachedUnits": {							"description": "option: describes units that have been detached from your unit",							"type": "array",							"minItem": 1,							"items": {									"type": "string"							},							"additionalItems": false						},						"assumptions": {							"description": "option: describes assumptions not covered",							"type": "string"						}					},					"additionalProperties": false,					"required": [						"areaOfInterest",						"intelligence",						"friendlyForces"					]				},				"msnStatement": {					"description": "required: describes the mission elements of assignment",					"type": "array",					"minItem": 1,					"items": {							"type": "string"					},					"additionalItems": false				},				"execution": {					"type": "object",					"properties": {						"intent": {							"description": "option: commander's input",							"type": "object",							"properties": {								"purpose": {									"description": "required: describes the 'why' of an assignment",									"type": "string"								},								"endState": {									"description": "required: describes the commander's envisioned outcome of mission.  This should be identicle to the overall task outcome criteria",									"type": "string"								}							},							"additionalProperties": true,							"required": [								"purpose",								"endState"							]						},						"conceptOfOperations": {							"description": "Required: a statement that directs the method in which subordinate units cooperate and the sequence of actions to achieve the end state.  Usually with a map, overlays or sand table.",							"type": "object",							"properties": {								"statement": {									"description": "option: single statement describing the CONOPS and how it fits into higher echelon CONOPS",									"type": "string"								},								"coursesOfAction": {									"description": "Required: Describes the possible courses of action and their decisive point (trigger)",									"type": "array",									"minItems": 1,									"items": {										"$ref": "#/definitions/courseOfAction"									}								},								"schemeOfManeuver": {									"description": "required: describes how each unit will maneuver to accomplish its mission and meets the commander's intent. ",									"type": "array",									"minItem": 1,									"items": {										"$ref": "#/definitions/maneuverObject"									},									"additionalItems": false								},								"schemeOfIntel": {									"description": "Option: Describes how intelligence will be collected, provided and updated",									"type": "string"								},								"schemeOfFires": {									"description": "Required: Describes how fires will be provided including sources, round types, times, prioritized units",									"type": "string"								},								"schemeOfSecurity": {									"description": "Option: Describes how security will be set, detainee teams, crowd control, traffic control, female search teams, surrveilance assets",									"type": "string"								},								"stabilityTasks": {									"description": "Option: Describes tasks to establish conditions of normality and cooperation in a civil area",									"type": "string"								},								"assessment": {									"description": "Option: Describes how to assess progress of operation",									"type": "string"								},								"subUnitTasks": {									"description": "Required: These should be identicle to the team task(s) being measured",									"type": "array",									"minItems": 1,									"items": {										"type": "object",										"properties": {											"unitDesignation": {												"type": "string"											},											"unitTask": {												"type": "string"											}										},										"additionalProperties": false,										"required": [											"unitDesignation",											"unitTask"										]									}								},								"coordinatingInsts": {									"description": "Required: coordination required as part of CONOPS",									"type": "object",									"properties": {										"timeEffective": {											"description": "Required: time to execute",											"type": "string",											"format": "time"										},										"PriIntelRequirements": {											"description": "option: list of what priority intelligence is required",											"type": "array",											"items": {												"type": "string"											}										},										"essentialFriendlyInformation": {											"description": "Required: Describes the 'who', 'when' and 'where' of operation",											"type": "string"										},										"fireSupportCoordination": {											"description": "Required: Describes the 'who', 'when' and 'where' of operation",											"type": "string"										},										"airspaceCoordination": {											"description": "Required: Describes the 'who', 'when' and 'where' of operation",											"type": "string"										},										"rulesOfEngagement": {											"description": "Required: Describes the 'who', 'when' and 'where' of operation",											"type": "string"										},										"riskReductionControl": {											"description": "Required: Describes the 'who', 'when' and 'where' of operation",											"type": "string"										},										"persRecoveryCoordination": {											"description": "Required: Describes the 'who', 'when' and 'where' of operation",											"type": "string"										},										"environmentalConsiderations": {											"description": "Required: Describes the 'who', 'when' and 'where' of operation",											"type": "string"										},										"themesMessages": {											"description": "Required: Describes the 'who', 'when' and 'where' of operation",											"type": "string"										},										"otherCoordinationInsts": {											"description": "Required: Describes the 'who', 'when' and 'where' of operation",											"type": "string"										}									}								}							},							"additionalProperties": false,							"required": [								"coursesOfAction",								"schemeOfManeuver",								"schemeOfFires",								"subUnitTasks"							]						}					},					"additionalProperties": false,					"required": [						"intent",						"conceptOfOperations"					]				},				"sustainment": {					"type": "object",					"properties": {						"logistics": {							"type": "object",							"properties": {								"maintenance": {									"type": "string"								},								"transport": {									"type": "string"								},								"medical": {									"type": "string"								},								"ammunition": {									"type": "string"								},								"epwProcessing": {									"type": "string"								},								"mealsWater": {									"type": "string"								},								"personnel": {									"type": "string"								}							},							"additionalProperties": false,							"required": [								"medical",								"ammunition",								"epwProcessing",								"mealsWater",								"personnel"							]						}					}, 					"additionalProperties": false,					"required": [						"logistics"					]				},				"commandSignal": {					"type": "object",					"properties": {						"command": {							"commandLocation": {								"type": "string"							},							"commandSuccession": {								"type": "string"							},							"liaisonRqmts": {								"type": "string"							},							"cmdPosts": {								"type": "array",								"items": {									"$ref": "#/definitions/cmdPost"								},								"additionalItems": false							}						},						"control": {							"reports": {								"type": "string"							}													},						"signal": {							"codeWords": {								"description": "Option: what codewords represent key events or locations",								"type": "array",								"items": {									"type": "string"								},								"additionalItems": true							},							"passWords": {								"description": "Option: what passwords required to authenticate unit affiliation or access to key systems",								"type": "array",								"items": {									"type": "string"								},								"additionalItems": true							},							"commNets": {								"description": "Option: what comm nets area available and for what purpose",								"type": "array",								"items": {									"$ref": "#/definitions/commNet"								},								"additionalItems": false							}												}					},					"additionalProperties": false,					"required": [						"command",						"signal"					]				}			},			"additionalProperties": false,			"required": [				"orderType",				"dateTime",				"sendingUnit",				"timeZone",				"situation",				"msnStatement",				"execution",				"sustainment",				"commandSignal"			]		},		"cmdPost": {			"description": "",			"type": "object",			"properties": {				"designation": {					"type": "string"				},				"location": {					"$ref": "#/definitions/mapLocation"				},				"opTime":  {					"type": "string",					"format": "time"				}			}		},		"commNet": {			"description": "",			"type": "object",			"properties": {				"designation": {					"description": "network designation",					"type": "string"				},				"purpose": {					"description": "function of comm network",					"type": "string"				},				"system": {					"description": "system network is using or part of",					"type": "string"				},				"channel": {					"description": "channel number being used (if any)",					"type": "string"				},				"frequency": {					"description": "frequency of channel or system being used",					"type": "string"				},				"endpoint": {					"description": "endpoint of network being connected to (ip or domain)",					"type": "string"				},				"port": {					"description": "port in endpoint being connected to - if any",					"type": "string"				}			},			"additionalProperties": false,			"required": ["designation"]		},		"glyph": {			"description": "optional: a glyph-symbol image sused to represent a team, role or object on map",			"type": "object",			"properties": {				"standard": {					"type": "string",					"default": "MIL-STD-2525C"				},				"symbolCode": {					"type": "string"				},				"additionalInfo": {					"type": "string"				},				"symbolModifier2": {					"type": "string"				},				"functionId": {					"type": "string"				}			}		},		"equipmentItem": {			"description": "an equipment item that has a unique instance in an exercise.  Can be dropped, manned, carried, or used by actors",			"type": "object",			"properties": {				"equipId": {					"description": "required: the unique synthetic environment core (SECORE) master equipment list identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"equipUuid": {					"description": "required: unique master equipment model designation or model number",					"type": "string"				},				"wpUrl": {					"description": "option: unique wikipedia reference to support equipment data",					"type": "string",					"format": "uri"				},				"equipName": {					"description": "required: fas ref designated nomenclature given to equipment",					"type": "string"				},				"equipType": {					"description": "required: fas designated type of equipment that defines its use",					"type": "string",					"enum": [						"weapon",						"support",						"protection",						"fixed",						"sensor",						"admin"					]				},				"model": {					"$ref": "#/definitions/3dModel"				},				"location": {					"description": "required: coordinate location of equipment when not being carried",					"$ref": "#/definitions/coordinate"				},				"direction": {					"description": "required: azimuth/pitch/roll/yaw direction of equipment in gcc",					"$ref": "#/definitions/vectorCoordinate"				},				"disposable": {					"description": "required: if equipment cannot be reused - launchers, grenades, etc...",					"type": "boolean"				},				"weight": {					"description": "required: the weight of the equipment (in lbs) when carried",					"type": "number"				},				"equipMode": {					"description": "required: which state or mode - if equipment item has modes or states of readiness prior to use.  e.g., safe, auto, semi, etc...",					"type": "string"				},				"equipState": {					"description": "required: if equipment is good, damaged or malfunctioned",					"type": "string",					"enum": [						"good",						"damaged",						"malfunctioned"					]				},				"ammoType": {					"description": "option: only if equipment is a weapon type - can be tracer, ball, AP, HE, smoke, etc...",					"type": "string"				},				"ammoQty": {					"description": "option: only if equipment is a weapon type",					"type": "integer"				},				"assignedActor": {					"description": "required: what actor is assigned to carry equipment - 0 means dropped",					"type": "integer"				},				"inUse": {					"description": "option: flag if this equipment is being used",					"type": "boolean"				}			},			"required": [				"equipId",				"equipUuid",				"equipName",				"equipType",				"weight",				"assignedActor"			],			"additionalProperties": false		},		"wound": {			"description": "a wound will be randomly determined based on the weapon, the body area it collides with.  This will produce different blood loss rates, performance limitations, and require different first-aid tasks to perform before blood loss and shock occurs.",			"type": "object",			"properties": {				"woundType": {					"type": "string"				},				"location": {					"type": "string",					"enum": [						"1-head",						"2-neck",						"3-torso",						"4-left-arm",						"5-right-arm",						"6-left-leg",						"7-right-leg",						"8-left-hand",						"9-right-hand",						"10-left-foot",						"11-right-foot"					]				},				"severity": {					"type": "string",					"enum": [						"1-punctured artery",						"2-punctured non-artery",						"3-sucking chest",						"4-concussion",						"5-clean-brake",						"6-compound-brake",						"7-severed"					]				},				"damageValue": {					"type": "number"				}			},			"required": [				"woundType"			],			"additionalProperties": false		},		"actor": {			"description": "a real or AI person in an exercise that is represented by an entity or a live person (in live events).  Each actor will be registered to a specific device(s) and/or feduciary marker to track their performance.  Each actor will be assigned to one or more team-roles on a team and side",			"type": "object",			"properties": {				"actorId": {					"description": "required: exercise unique id - should also be used as the entity id",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"actorUuid": {					"description": "required: the real person's id if a real player else blank",					"type": "string"				},				"actorName": {					"description": "required: default will be a 'dummy name' (e.g., 'Actor1'). when assigned a real player will use real trainee's name",					"type": "string",					"default": ""				},				"realPlayer": {					"description": "required: defines if an actor is a real player or AI",					"type": "boolean",					"default": true				},				"offMapPlayer": {					"description": "required: defines if an actor will be on map or played in background only using text or voice (e.g., command, fires, aircraft)",					"type": "boolean",					"default": false				},				"ghostPlayer": {					"description": "required: defines actor is 'alive' in-exercise or else can 'roam' map freely as a 'ghost' player",					"type": "boolean",					"default": true				},				"model": {					"description": "optional: if on-map, live, player, the 3D model associated with this actor",					"$ref": "#/definitions/3dModel"				},				"location": {					"description": "required: location on the exercise map",					"$ref": "#/definitions/coordinate"				},				"bodyDirection": {					"description": "required: azimuth/pitch/roll direction vector from the body torso center; north-0 elevation default",					"$ref": "#/definitions/vectorCoordinate"				},				"headDirection": {					"description": "required: azimuth/pitch/roll direction vector from the entity head center; north-0 elevation default",					"$ref": "#/definitions/vectorCoordinate"				},				"eyesDirection": {					"description": "optional: azimuth/pitch/roll direction vector from the entity head eye position; slaved to head direction default",					"$ref": "#/definitions/vectorCoordinate"				},				"rank": {					"description": "required: defaults to that associated with assigned role - overwritten by actual rank of the real player",					"type": "string"				},				"sex": {					"description": "required: default auto - will become the sex and characteristics of the real player",					"type": "string",					"enum": [						"auto",						"male",						"female"					]				},				"race": {					"description": "required: default auto. Will become the real race of the real player",					"type": "string",					"enum": [						"auto",						"asian",						"pacific islander",						"black",						"southeast asian",						"southwest asian",						"hispanic",						"arab",						"caucasian"					]				},				"age": {					"description": "required: default auto. Will become the real age-range of real player",					"type": "string",					"enum": [						"auto",						"infant (0-1)",						"toddler (1-3)",						"child (3-10)",						"adolescent (10-12)",						"teenager (13-16)",						"youngAdult (17-25)",						"adult (25-55)",						"seniorAdault (55-70)",						"elderly (71+)"					]				},				"bodyType": {					"description": "required: default auto - will become the real build of the real player",					"type": "string",					"enum": [						"auto",						"heavy",						"medium",						"slim"					]				},				"bodyHeight": {					"description": "required: default 69 inches - will become the real height of the real player",					"type": "number",					"default": 69.0				},				"fitness": {					"description": "required: default 7 - will become the real fitness level of the real player.  Will reduce fatigue rate with complex environments",					"type": "number",					"default": 7				},				"bodyPose": {					"description": "required: default auto - will change with player or script init.  Some of these will need to be custom",					"type": "string",					"enum": [						"stand",						"kneel",						"prone",						"float",						"parachuting",						"sit",						"squat",						"crouch",						"lying",						"slump"					]				},				"weaponPose": {					"description": "required: default primary is low-ready, secondary is slung - will change with player or script init",					"type": "string",					"enum": [						"aiming",						"high-ready",						"low-ready",						"patrol",						"show-of-force",						"offset-above",						"offset-left",						"offset-right",						"slung"					]				},				"actions": {					"type": "array",					"minItems": 1,					"items": {						"type": "number"					}				},				"gestures": {					"type": "array",					"minItems": 1,					"items": {						"type": "number"					}				},				"training": {					"description": "required: default 5 - will increase speed, shot accuracy, reduce fatigue rate, increase fatique threshold, determine navigation route used to approach enemy ",					"type": "number",					"default": 5				},				"experience": {					"description": "required: default 5 - will decrease morale drop rate, decrease suppression range, and decrease response to being shot at",					"type": "number",					"default": 5				},				"leadership": {					"description": "required: default 5 - will increase accuracy and decrease delay that AI subordinate entities will follow leader movements and verbal directions",					"type": "number",					"default": 5				},				"teamwork":{					"description": "optional: how well the team supports each other, communicates, etc.  Not implemented now until more defined measures are conceived "				},				"resilience": {					"description": "required: default 6 - threshold to be suppressed or to break.",					"type": "number",					"default": 6				},				"awareness": {					"description": "required: cooper's code state with overload - white - not aware, yellow - observant, orange - active searching for threat, red - observing/engaging threat, black - cognitive overload",					"type": "string",					"enum": [						"white",						"yellow",						"orange",						"red",						"black"					],					"default": "yellow"				},				"bloodLevel": {					"description": "required: will default 100 - lost at rate based on health and wound types",					"type": "number",					"default": 100				},				"health": {					"description": "required: will default 0 - no injury. 1=heat-stroke,2=heat-exhaustion,3=wounded,4=shock,5=dead",					"type": "number",					"default": 100				},				"wounds": {					"description": "required: array of severity and type of wounds",					"type": "array",					"items": {						"$ref": "#/definitions/wound"					}				},				"mounted": {					"description": "required: is actor being carried by a vessel, vehicle, aircraft, animal or human",					"type": "boolean",					"default": false				},				"carriedEquipment": {					"description": "required: list of equipment being carried.  Will multiply fatique rate, reduce speed, and decrease response time",					"type": "array",					"items": {						"equipmentId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"carriedWeight": {					"description": "required: will be automatically calculated based on carried equipment, and/or carried personnel",					"type": "number"				}			},			"required": [				"actorId",				"actorName",				"location"			],			"additionalProperties": false		},		"role": {			"description": "a position on a team that has duties or responsibilities to make specific decisions, perform specific tasks and/or use specific equipment",			"type": "object",			"properties": {				"roleId": {					"description": "required: in-exercise unique team-role id - same role can be assigned to different teams giving it a new unique id",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"roleUuid": {					"description": "required: the common army role UUIDj - aka positions",					"type": "string"				},				"roleName": {					"description": "required: the name is based on the role/position defined by the Army or other organization",					"type": "string",					"default": ""				},				"roleAbbrev": {					"description": "required: abbreviation used on the glyph symbol",					"type": "string",					"default": ""				},				"roleModel": {					"description": "optional: the 3D model used to represent role",					"$ref": "#/definitions/3dModel"				},				"roleRank": {					"description": "required: rank typically assigned to role - used as default",					"type": "string",					"enum": [						"PVT",						"CPL",						"SPC",						"SGT",						"SSG",						"SFC",						"1LT",						"CPT",						"CIV",						"CTR"					]				},				"leader": {					"description": "required: defines if role is a leader position in an assigned team",					"type": "boolean",					"default": false				},				"roleSymbol": {					"$ref": "#/definitions/glyph"				},				"roleActor": {					"description": "required: the AI or real actors that will play this role",					"actorId": {						"oneOf": [							{								"type": "integer"							},							{								"type": "string"							}						]					}				},				"roleEquipment": {					"description": "required: a list of equipment that this role requires",					"type": "array",					"items": {						"equipmentId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"roleLocation": {					"description": "required: unique position associated with this team-role to identify if an actor is playing the role",					"anyOf": [						{							"$ref": "#/definitions/mapLocation"						},						{							"type": "string"						}					]				}			},			"required": [				"roleId",				"roleName",				"roleAbbrev",				"leader"			],			"additionalProperties": false		},		"team": {			"description": "a tactical small unit that is associated with a side.  A team can contain roles and/or sub-teams.  Each team has assigned actors in assigned role(s) at beginning of an exercise",			"type": "object",			"properties": {				"teamId": {					"description": "in exercise team identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"teamUuid": {					"description": "global team identifier",					"type": "string"				},				"teamDesignation": {					"description": "required: default name that can be overwritten with actual team name playing this exercise team",					"type": "string"				},				"teamType": {					"description": "required: what type of team is required for this team - e.g., rifle-infantry, motorized-infantry, etc...",					"type": "string",					"enum": [						"Rifle-Infantry",						"Motorized-Infantry",						"Admin"					]				},				"teamEchelon": {					"description": "required: what echelon is required for this team",					"type": "string",					"enum": [						"Brigade",						"Battalion",						"Squadron",						"Company",						"Troop",						"Battery",						"Platoon",						"Section",						"Squad",						"Team",						"Crew",						"Eval",						"Other"					]				},				"teamStatus": {					"description": "required: status of the team",					"$ref": "#/definitions/teamState"				},				"onMap": {					"description": "required:is team on map or played in background - e.g., a training or command team",					"type": "boolean",					"default": true				},				"teamComms": {					"description": "optional: what communication does unit have or can be on",					"type": "array",					"items": {						"$ref": "#/definitions/commNet"					},					"additionalItems": false				},				"teamModel": {					"description": "optional: what 3D model does the unit use",					"type": "string"				},				"teamSymbol": {					"$ref": "#/definitions/glyph"				},				"teamLocation": {					"description": "required: where team begins exercise-scenario at start time",					"anyOf": [						{							"$ref": "#/definitions/mapLocation"						},						{							"type": "string"						}					]				},				"teamEquipment": {					"description": "optional: what equipment does the team have in it",					"type": "array",					"minItems": 1,					"items": {						"equipmentId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"teamRoles": {					"description": "required: role(s) assigned to this team",					"type": "array",					"minItems": 1,					"items": {						"roleId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"subTeams": {					"description": "optional: sub team(s) assigned to this team",					"type": "array",					"minItems": 1,					"items": {						"teamId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				}			},			"required": [				"teamId",				"teamDesignation",				"teamEchelon"			],			"additionalProperties": false		},		"teamState": {			"description": "required: status of the team",			"damageState": {				"description": "optional: summary damage of unit",				"type": "string",				"enum": ["Green","Amber","Red","Black"]			},			"weaponControlState": {				"description": "optional: ",				"type": "string",				"enum": ["Green","Amber","Red","Black"]			},			"taskState": {				"description": "optional: ",				"type": "string",				"enum": ["Green","Amber","Red","Black"]			},			"ammunitionState": {				"description": "optional: ",				"type": "string",				"enum": ["Green","Amber","Red","Black"]			},			"stressState": {				"description": "optional: ",				"type": "string",				"enum": ["Green","Amber","Red","Black"]			},			"combatEffectiveness": {				"description": "optional: ",				"type": "string",				"enum": ["Green","Amber","Red","Black"]			}		},		"unit": {			"description": "this is a unit type of a specific echelon",			"type": "object",			"properties": {				"unitId": {					"description": "required: unique ID of a force side in an exercise",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"unitDomain": {					"description": "optional: the proponent type",					"type": "string",					"enum": [						"Infantry",						"Armor",						"Aviation",						"Engineers",						"Field Artillery",						"Air Defense",						"CBRN",						"Medical",						"Military Intelligence",						"Military Police",						"Mission Command",						"Psychological Operations",						"Civil Affairs",						"Ordance",						"Maintenance",						"Quartermaster",						"Supply",						"Special Operations",						"Transportation"					]				},				"unitType": {					"description": "optional: the force unit's capabilities and equipment - intel dependent",					"type": "string",					"enum": [						"Rifle",						"Anti-Armor",						"Ranger",						"Airborne",						"Dismounted Cavalry",						"Motorized",						"Reconnaissance",						"Scouting",						"Security"											]				},				"unitDesignation": {					"description": "required: the name of the organization",					"type": "string"				},				"unitEchelon": {					"description": "required: the echelon of the unit",					"type": "string",					"enum": [						"Squad",						"Platoon",						"Company",						"Troop",						"Battery",						"Battalion",						"Squadron"					]				},				"unitSymbol": {					"$ref": "#/definitions/glyph"				},				"unitStatus": {					"description": "required: status of the unit",					"$ref": "#/definitions/teamState"				},				"unitComms": {					"description": "optional: what communication does unit have or can be on",					"type": "array",					"items": {						"$ref": "#/definitions/commNet"					},					"additionalItems": false				},				"unitOnMap": {					"description": "required:is team on map or played in background - e.g., a training or command team",					"type": "boolean",					"default": true				},				"unitLocation": {					"description": "required: where team leader begins exercise-scenario at start time",					"anyOf": [						{							"$ref": "#/definitions/mapLocation"						},						{							"type": "string"						}					]				},				"unitEquipment": {					"description": "optional: what equipment does the unit have",					"type": "array",					"minItems": 1,					"items": {						"equipmentId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"unitTeams": {					"description": "optional: team(s) assigned to this team",					"type": "array",					"minItems": 1,					"items": {						"teamId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"unitRoles": {					"description": "required: role(s) associated with this team",					"type": "array",					"minItems": 1,					"items": {						"roleId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"subUnits": {					"description": "optional: what units are assigned to this unit",					"type": "array",					"minItems": 1,					"items": {						"unitId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				}			},			"required": [				"unitId",				"unitType",				"unitDesignation",				"unitEchelon"			],			"additionalProperties": false		},		"organization": {			"description": "optional: this is a force side in a scenario.",			"type": "object",			"properties": {				"orgId": {					"description": "required: unique ID of a force side in an exercise",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"orgName": {					"description": "required: the name of the organization",					"type": "string"				},				"countryCode": {					"description": "optional: the country the organization represents",					"type": "string",					"enum": [						"US",						"DA",						"AT"					]				},				"orgType": {					"description": "required: the type of organization",					"type": "string",					"enum": [						"AIRFRC",						"ARMY",						"GUERLL",						"NAVY",						"MARINE",						"SPFRC",						"TERFRC"					]				},				"orgSymbol": {					"$ref": "#/definitions/glyph"				},				"units": {					"description": "required: units that are part of organization",					"type": "array",					"items": {						"unitId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"teams": {					"description": "optional: team(s) assigned to this side",					"type": "array",					"minItems": 1,					"items": {						"teamId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				}			},			"required": [				"orgId",				"orgName",				"countryCode",				"orgType"			],			"additionalProperties": false		},		"side": {			"description": "optional: this is a force side in a scenario.",			"type": "object",			"properties": {				"sideId": {					"description": "required: exercise unique side id",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"sideName": {					"description": "",					"type": "string"				},				"affiliation": {					"description": "required: exercise affiliation relative to trainee (BLUFOR) side",					"type": "string",					"enum": [						"BLUFOR",						"OPFOR",						"NEUFOR",						"INDHOSTILE",						"CIVILIAN",						"ADMIN"					]				},				"organizations": {					"description": "required: organizations that is affiliated in the side",					"type": "array",					"items": {						"$ref": "#/definitions/organization"					},					"additionalItems": false				},				"units": {					"description": "required: units that are assigned to this side",					"type": "array",					"items": {						"unitId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"teams": {					"description": "optional: team(s) assigned to this side",					"type": "array",					"minItems": 1,					"items": {						"teamId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				}			},			"required": [				"sideId",				"sideName"			],			"additionalProperties": false		},		"overlay": {			"description": "optional: any/all tactical or exercise control overlays used to inform, prompt players or to help OC/T control exercise execution, prompts or guides.  overlays support one of four functions between TSS and TMT: mission description, exercise execution triggers (TSS features), assessment triggers and/or assessment criteria (TMT features)",			"type": "object",			"properties": {				"overlayId": {					"description": "required: exercise unique overlay id",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"overlayName": {					"type": "string"				},				"overlayUse": {					"type": "string",					"enum": [						"tactical",						"trigger",						"assessment",						"script",						"activity"					]				},				"symbolCode": {					"type": "string"				},				"shape": {					"type": "string",					"enum": [						"Point",						"Polygon",						"LineString",						"Circle",						"MultiLineString",						"MultiPolygon"					]				},				"anchor": {					"description": "used to represent an object's vertical axis coordinate reference point for its vector coordinates",					"$ref": "#/definitions/coordinate"				},				"points": {					"description": "used to represent all points in a shape or overlay",					"type": "array",					"items": {						"$ref": "#/definitions/coordinate"					},					"additionalItems": false				},				"radius": {					"description": "radius in meters used for circles",					"type": "integer"				},				"width": {					"description": "width in meters used for squares or rectangle",					"type": "integer"				},				"length": {					"description": "length in meters used for squares or rectangle",					"type": "integer"				},				"height": {					"description": "height in meters for 3D components of squares or rectangle",					"type": "integer"				},				"showLine": {					"type": "boolean",					"default": true				},				"lineColor": {					"type": "string",					"default": "#000000"				},				"lineAlpha": {					"type": "string",					"default": "FF"				},				"lineStyle": {					"type": "string",					"default": "solid"				},				"lineSize": {					"type": "string",					"default": "1px"				},				"showFill": {					"type": "boolean",					"default": true				},				"fillColor": {					"type": "string",					"default": "#000000"				},				"fillAlpha": {					"type": "string",					"default": "FF"				},				"textMessage": {					"type": "string",					"default": ""				},				"textColor": {					"type": "string",					"default": "#000000"				},				"textFont": {					"type": "string",					"default": "NewTimesRoman"				}			},			"required": [				"overlayId",				"overlayName",				"overlayUse",				"shape",				"points"			],			"additionalProperties": false		},		"level": {			"description": "a measured outcome credential assigned automatically or manually, based on associated criteria within a measure.",			"type": "object",			"properties": {				"levelId": {					"description": "required: unique local competency level identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"levelUuid": {					"type": "string"				},				"levelTitle": {					"type": "string"				},				"levelDescription": {					"type": "string"				}			},			"required": [				"levelId",				"levelDescription"			],			"additionalProperties": false		},		"dataSource": {			"description": "the automated observation point to measure performance data or evidence from",			"type": "object",			"properties": {				"srcId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"srcUuid": {					"type": "string"				},				"srcName": {					"type": "string"				},				"dataType": {					"description": "the type of data an algorithm or trainer uses to compare values to level criterion",					"type": "string",					"enum": [						"screen-pov",						"screen-video",						"comp-audio",						"video",						"audio",						"biometric",						"motion",						"cognitive",						"message",						"data-function"					]				},				"location": {					"description": "optional: where is the data source located",					"$ref": "#/definitions/mapLocation"				},				"focalPoint": {					"description": "optional: where is the data source pointed at",					"$ref": "#/definitions/vectorCoordinate"				},				"focusTeam": {					"description": "optional: which team, is the data source focus binded to",					"type": "integer"				},				"focusRole": {					"description": "optional: which role is the data source focus binded to",					"type": "integer"				},				"focusActor": {					"description": "optional: which actor is the data source focus binded to",					"type": "integer"				},				"sampleRate": {					"description": "optional: what is the sample rate of the source - e.g., eye tracker",					"type": "number"					},				"mountType": {					"description": "optional: what or who is the data sensor mounted on",					"type": "string",					"enum": [						"fixed",						"robot",						"actor",						"game"					]				}			},			"required": [				"srcId",				"srcName",				"dataType",				"mountType"			],			"additionalProperties": false		},		"criterion": {			"description": "level criterion are unique event inputs used by automatic or manual assessment",			"type": "object",			"properties": {				"criterionId": {					"description": "required: unique for every event, task/measure/criteria in an exercise",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"levelId": {					"description": "required: the level the criterion is for",					"type": "integer"				},				"criterion": {					"type": "string"				},				"criterionType": {					"description": "required: the type of criterion",					"type": "string",					"enum": [						"category",						"distance",						"time",						"count",						"match",						"correct",						"ratio"					]				},				"position": {					"description": "required: the order in which the criterion is evaluated",					"type": "integer"				},				"operator": {					"description": "required: the evaluation operators used to compare data with value",					"type": "string",					"enum": [						"=",						">",						"<",						">=",						"<=",						"!="					]				},				"value": {					"description": "required: what is expected for the level this criterion is assigned to.  Can be a decimal number, integer, string or boolean value",					"oneOf": [						{							"type": "number"						},						{							"type": "string"						},						{							"type": "boolean"						}					]				},				"metric": {					"description": "optional: the unit of measure used",					"type": "string",					"enum": [						"meters",						"centimeters",						"millimeters",						"minutes",						"seconds",						"milliseconds",						"percent",						"probability",						"activated",						"deactivated",						"completed",						"decibels",						"level",						"km/hr",						"m/s",						"shots/sec",						"words",						"shots",						"dead",						"wounded",						"max-fire",						"degrees"					]				},				"weight": {					"description": "optional: the weight of this criterion compared to other criterion",					"type": "number"				},				"logic": {					"description": "optional: indicates if this criterion is to be measured with previous criterion in position order",					"type": "string",					"enum": [						"AND",						"OR",						"EXOR",						"NOT"					]				},				"criterionNotes": {					"description": "optional: give additional criterion instruction to evaluator",					"type": "string"				}			},			"required": [				"criterionId",				"levelId",				"criterionType",				"operator",				"value"			],			"additionalProperties": false		},		"criteria": {			"description": "required: often either formative (used each measure trigger), summative (used at end of experience) or roll-up (when sub-measures are used)",			"type": "object",			"properties": {				"criteriaId": {					"description": "required: unique exercise id - locally assigned",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"criteriaUuid": {					"description": "optional: unique global id - globally assigned",					"type": "string"				},				"criteriaName": {					"description": "required: name of criteria",					"type": "string"				},				"weight": {					"description": "optional: a multiplier for when multiple criteria are used in the overall task-measure evaluation",					"type": "number"				},				"criteriaNotes": {					"description": "optional: give additional level-criteria notes to evaluator",					"type": "string"				}			},			"required": [				"criteriaId",				"evalMethod",				"criteriaName"			],			"additionalProperties": false		},		"measure": {			"description": "a measurable team outcome or individual (synthetic/live) action/gesture that is required for a task to be measured formatively in a given condition.  Measures are done using criteria, which that have sources of data, rubrics and levels (criterion) to automatically/manually evaluate",			"type": "object",			"properties": {				"msrId": {					"description": "required: an exercise unique task measure identifier associated with a tiven task in a given xEvent",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"msrUuid": {					"description": "optional: an exercise unique task measure identifier associated with a tiven task in a given xEvent",					"type": "string"				},				"msrTitle": {					"description": "required: The behavior, decision, identification, physiological state expected to happen",					"type": "string"				},				"msrClass": {					"description": "required: how is measure measured.  Summative means to evaluate the sum of all measured instances.  formative means to evaluate each instance.  Roll-up means to combine this measure with sub-measures.",					"type": "string",					"enum": [						"individual",						"team"					]				},								"msrType": {					"description": "optional: what is actually being measured",					"type": "string",					"enum": [						"assigned-task-completion",						"leadership-skill",						"motor-skill",						"cognitive-skill",						"teamwork-skill",						"attitude-state",						"affective-state",						"knowledge-state"					]				},				"position": {					"description": "optional: the sequence the measure should occur - for procedural steps",					"type": "integer"				},				"weight": {					"type": "number"				},				"msrConditions": {					"description": "option: required to enable measure",					"type": "array",					"minItems": 0,					"items": {						"type": "string"					}				},				"evalMethod": {					"type": "string",					"enum": [						"automated",						"manual",						"roll-up"					]				},				"evalClass": {					"type": "array",					"minItems": 0,					"items": {						"type": "string"					}				},				"dataSources": {					"description": "optional: evaluation points to observe xevent",					"items": {						"$ref": "#/definitions/dataSource"											},					"additionalItems": false				},				"methodInputs": {					"description": "option: use to define parameter inputs to evaluator",					"type": "array",					"minItems": 0,					"items": {						"type": "string"					}				},				"defaultLevel": {					"description": "option: what performance level should be assumed",					"levelId": {						"oneOf": [							{								"type": "integer"							},							{								"type": "string"							}						]					}				},				"formativeCriteria": {					"description": "option: use to measure in real-time",					"type": "array",					"minItems": 1,					"items": {						"$ref": "#/definitions/criterion"					}				},				"summativeCriteria": {					"description": "option: use to measure at end of an xevent",					"type": "array",					"minItems": 1,					"items": {						"$ref": "#/definitions/criterion"					}				},				"subMeasures": {					"description": "optional: a sub-measure that with its own criteria that must be met first to roll-up into this measure",					"type": "array",					"items": {						"$ref": "#/definitions/measure"					},					"additionalItems": false				},				"msrReport": {					"description": "optional: a pre defined xAPI format to be used with variables",					"type": "object",					"properties": {						"id": {							"type": "string"						},						"actor": {							"type": "string"						},						"verb": {							"type": "string"						},						"object": {							"type": "string"						},						"result": {							"type": "string"						},						"context": {							"type": "string"						},						"timestamp": {							"type": "string"						},						"stored": {							"type": "string"						},						"authority": {							"type": "string"						},						"version": {							"type": "number"						}					}				},				"measureNotes": {					"type": "string"				}			},			"required": [				"msrId",				"msrTitle",				"msrType",				"msrConditions",				"position"			]		},		"lrngRsrc": {			"description": "references learning resources.",			"type": "object",			"properties": {				"lrngRsrcId": {					"description": "optional: learning resources unique id",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"lrngRsrcUuid": {					"type": "string"				},				"lrngRsrcTitle": {					"type": "string"				},				"lrngRsrcNumber": {					"type": "string"				},				"lrngRsrcAuthor": {					"$ref": "#/definitions/author"				},				"publishDate": {					"type": "string",					"format": "date"				},				"fileType": {					"type": "string",					"enum": [						".html",						".pdf",						".txt",						".doc",						".xml",						".json"					]				},				"referencePublisher": {					"type": "string"				},				"refChapPagePara": {					"type": "string"				}			},			"required": [				"lrngRsrcId",				"lrngRsrcTitle",				"publishDate",				"fileType"			],			"additionalProperties": false		},		"task": {			"description": "an approved unit of performance required by a team or individual team role or job in routine, abnormal or emergent conditions",			"type": "object",			"properties": {				"taskId": {					"description": "required: a unique local-exercise-xevent task identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"taskUuid": {					"description": "optional: a unique global task identifier in semantic network",					"type": "string"				},				"compFramework": {					"description": "optional: the universal competency framework identifier that this task supports",					"type": "string"				},				"competency": {					"description": "optional: the universal competency identifier that provides evidence for this task result",					"type": "string"				},				"taskTitle": {					"description": "required: the given task title by the task proponent",					"type": "string"				},				"taskType": {					"description": "required: is task for team outcomes or individual role outcomes",					"type": "string",					"enum": ["team", "individual"]				},				"cues": {					"description": "optional: the one or various triggers that together should activate a task",					"type": "array",					"items": {						"text": "string"					}				},								"safetyRisk": {					"description": "required: indicates the potential safety risk performing the task - tells OCT what to watch",					"type": "string",					"enum": [						"low",						"medium",						"high"					]				},				"taskMeasures": {					"description": "optional: indicates the methods to measure the task",					"type": "array",					"items": {						"$ref": "#/definitions/measure"					}				},				"supportTasks": {					"description": "optional: tasks required to be completed by other roles to complete the task",					"type": "array",					"items": {						"taskId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"subTasks": {					"description": "optional: sub-tasks required to complete the task",					"type": "array",					"items": {						"taskId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"teamSkills": { 					"description": "optional: if team task type then list each required teamskill",					"type": "array",					"items": {						"teamSkillId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"supportAffects": { 					"description": "optional: affects needed to support task",					"type": "array",					"items": {						"affectId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				},				"lrngResources": {					"description": "optional: learning resources that can be provided on demand to actors during crawl or training walk phases",					"type": "array",					"items": {						"lrngRsrcId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				}			},			"additionalProperties": false,			"required": [				"taskId",				"taskTitle",				"taskType",				"safetyRisk",				"taskMeasures"			]		},		"teamSkill": {			"description": "a skill that is necessary for a person to produce teamwork",			"type": "object",			"properties": {				"teamSkillId": {					"description": "required: a unique local team-skill identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"teamSkillUuid": {					"description": "required: a unique global common team-skill",					"type": "string"				},				"teamSkillTitle": {					"description": "required: the given name of the team-skill",					"type": "string"				},				"compFramework": {					"description": "optional: the universal competency framework identifier that this team-skill supports",					"type": "string"				},				"competency": {					"description": "optional: the universal competency identifier that provides evidence for this team-skill results in",					"type": "string"				},				"teamSkillMeasures": {					"description": "required: measures of this team-skill",					"type": "array",					"items": {						"$ref": "#/definitions/measure"					},					"additionalItems": false				}			},			"additionalProperties": false,			"required": [				"teamSkillId",				"teamSkillTitle",				"teamSkillMeasures"			]		},		"affect": {			"description": "state are learning, cognitive, physiological or affective conditions that can trigger specific strategies",			"type": "object",			"properties": {				"affectId": {					"description": "required: a unique local state identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"affectUuid": {					"description": "optional: the universal affect identifier",					"type": "string"				},				"competencyUuid": {					"description": "optional: the universal competency identifier that this provides evidence for",					"type": "string"				},				"affectName": {					"description": "required: name of affect",					"type": "string"				},				"affectType": {					"description": "required: type of affect",					"type": "string",					"enum": [						"attitude",						"value",						"psychologic",						"physiologic"					]				},				"affectTgtState": {					"type": "string"				},				"affectMeasures": {					"description": "required: measures of this team-skill",					"type": "array",					"items": {						"$ref": "#/definitions/measure"					},					"additionalItems": false				}			},			"required": [				"affectId",				"affectName",				"affectType",				"affectMeasures"			],			"additionalProperties": false		},		"transition": {			"description": "state are learning, cognitive, physiological or affective conditions that can trigger specific strategies",			"type": "object",			"properties": {				"transitionId": {					"description": "required: a unique local state identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"transitionName": {					"description": "optional: the name of a transition",					"type": "string"				},				"transitionType": {					"description": "required: the type of state",					"type": "string",					"enum": [						"task",						"team-skill",						"affect",						"measure",						"criterion"					]				},				"initialState": {					"description": "optional: the initial state",					"levelId": {						"type": "integer"					}					},				"targetStates": {					"description": "required: the target state",					"type": "array",					"items": {						"levelId": {							"type": "integer"						}						},					"additionItems": false				}			},			"additionalProperties": false,			"required": [				"transitionId",				"transitionType",				"targetStates"			]		},		"activity": {			"description": "Activities are scripts used initiate, modify exercise or provide communication to actors",			"type": "object",			"properties": {				"activityId": {					"description": "required: a unique local activity identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"activityUuid": {					"description": "optional: unique master activity id for reuse",					"type": "string"				},				"activityName": {					"description": "optional: the name of a API function that runs a activity",					"type": "string"				},				"difficultyLevel": {					"description": "optional: a float number indicating the inherit degree of difficulty / complexity the activity will present to the target actor.  Used to set a baseline difficulty rating in an given xEvent.  Not using this difficulty level corresponds to lowest difficulty rating.",					"type": "number"				},				"stressLevel": {					"description": "optional: assigns number of stress points to players and type.  Positive number if negative stress.  Negative number if positive stress.  type is either environmental, cognitive or physical.  These points are summed up at the strategy and/or xEvent level",					"type": "array",					"minItems": 1,					"items": {						"type": "object",						"properties": {							"stressorId": {								"oneOf": [									{										"type": "integer"									},									{										"type": "string"									}								]							},							"stressType": {								"type": "string",								"enum": [ 									"Environmental", 									"Cognitive", 									"Physical"								]							},							"difficultyPoints": {								"type": "number",								"default": 0							},							"stressPoints": {								"type": "number",								"default": 0							}						},							"additionalProperties": false,						"required": [							"stressType",							"stressPoints"						]					}				},				"activityType": {					"description": "required: helps filter GUI list",					"type": "string",					"enum": [						"Scenario adaptation",						"Actor intervention",						"Exercise control",						"Custom script"					]				},				"scriptHandler": {					"type": "string"				},				"scriptParameters": {					"type": "string"				},				"scriptCommand": {					"description": "required: the script command that executes an activity",					"type": "string"				}			},			"required": [				"activityId",				"activityName",				"activityType"			],			"additionalProperties": false		},		"strategy": {			"description": "an set of activities (training app scripts) that provide either an experience alteration or actor intervention",			"type": "object",			"properties": {				"strategyId": {					"description": "required: a unique local learning strategy identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"strategyUuid": {					"type": "string"				},				"strategyName": {					"type": "string"				},				"strategySource": {					"description": "required: what/who is responsible for activating strategy.",					"type": "string", 					"enum": [ 						"trainer",						"training app",						"adaption engine",						"its"					],					"default": "training app"				},				"difficultyLevel": {					"description": "required: an integer indicating the inherit degree of difficulty the sub-activities add up to.",					"type": "integer"				},				"stressLevel": {					"description": "optional: when tracking difficulty (complexity) and stress seperately, this is a number indicating the degree of positive or negative stress 'points' the sub-activities are expected to produce",					"type": "number"				},				"activities": {					"type": "array",					"minItems": 1,					"items": {						"type": "object",						"properties": {							"activityId": {								"type": "integer"							},							"activityName": {								"type": "string"							}						},							"additionalProperties": false,						"required": [							"activityId"						]					},					"additionalItems": false				}			},			"required": [				"strategyId",				"strategySource",				"difficultyLevel",				"activities"			],			"additionalProperties": false		},		"function": {			"description": "functions are TSS routines that stream data in support of a specific task measure.  They are intended to support either live, semi-live sensors or full synthetic rendering engines that need to emulate a specific live sensor so measuresments across each training environment is the same.",			"type": "object",			"properties": {				"functionId": {					"description": "required: a unique local function identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"functionUuid": {					"description": "optional: unique master script id for reuse",					"type": "string"				},				"functionName": {					"type": "string"				},				"functionType": {					"type": "string",					"enum": [						"Behavior",						"DataSource"					],					"default": "DataSource"				},				"functionClass": {					"type": "string",					"enum": [						"global",						"local"					]				},				"functionArguments": {					"description": "optional: list of parameters required by the script",					"type": "array",					"minItems": 1,					"items": {						"oneOf": [							{								"type": "integer"							},							{								"type": "string"							}						]					},					"additionalItems": true				}			},			"required": [				"functionId",				"functionName",				"functionType",				"functionClass",				"functionArguments"			],			"additionalProperties": false		},		"controls": {			"description": "these are controls provided to the actor or the trainer to initiate, respond or control events or simulate actions not possible with training environment",			"type": "object",			"properties": {				"controlId": {					"description": "required: a unique local control identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"controlName": {					"type": "string"				},				"controlType": {					"type": "string",					"enum": [						"actor control",						"scenario control",						"trainer control"					]				},				"controlScript": {					"type": "integer"				}			},			"required": [				"controlId",				"controlName",				"controlType"			],			"additionalProperties": false		},		"trigger": {			"description": "triggers activate xEvents and/or strategies or activities.  Can be a system action, actor-behavior, entity-behavior, entity-state transition, or a actor-state transition.",			"type": "object",			"properties": {				"triggerId": {					"description": "required: a unique local trigger identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"triggerUuid": {					"description": "optional: unique master trigger id for reuse",					"type": "string",					"format": "uri",					"default": "https://www.army.mil/ste-tmt/triggers/#"				},				"triggerName": {					"description": "required: Defines the name of the trigger - referenced in menu.",					"type": "string"				},				"targets": {					"description": "required: Defines the list of 'who/what' (actors/entities/activities) can trip this trigger - defined by their type and id",					"type": "array",					"minItems": 1,					"items": {						"type": "object",						"properties": {							"targetId": {								"description": "required: points to a subject element",								"type": "integer"							},							"targetName": {								"description": "optional: supplements subject element id",								"type": "string"							},							"targetType": {								"description": "required: classifies subjects for filtering",								"type": "string",								"enum": [									"strategy",									"exercise",									"side",									"team",									"role",									"actor",									"trainer",									"platform",									"system",									"trigger",									"transition"								]							},							"targetDefaultState": {								"description": "optional: a default state (level, articulation, bio, etc...) an target needs to be in to trip trigger",								"anyOf": [									{										"type": "string"									},									{										"type": "integer"									}								]							}						},						"additionalProperties": false,						"required": [							"targetId",							"targetType"						]					}				},				"triggerAction": {					"description": "required: Defines what action target must do to the target object to trip trigger.",					"type": "string",					"enum": [						"start",						"stop",						"assess",						"cross",						"change to",						"select",						"complete",						"move",						"move to",						"enter",						"exit",						"fire",						"trip",						"perform",						"detect",						"speak",						"shut down",						"activate"					]				},				"triggerObjects": {					"description": "optional: Defines object/location/state that contains the trigger",					"type": "array",					"minItems": 1,					"items": {						"type": "object",						"properties":{							"objectType": {								"description": "the objects type that trips trigger.  can be more than one - e.g., measure and level",								"type": "string",								"enum": [									"xevent",									"task",									"measure",									"criteria",									"actor",									"role",									"team",									"side",									"state",									"level",									"overlay",									"function",									"device",									"object",									"entity",									"equipment"								]							},							"objectId": {								"description": "required: a unique local trigger identifier",								"oneOf": [									{										"type": "integer"									},									{										"type": "string"									}								]							},							"objectName": {								"description": "an object name that trips trigger",								"type": "string"							}						},						"additionalProperties": false					},					"additionalItems": false				},				"triggerDelayTime": {					"description": "option: scenario time when the trigger actually activates after being tripped",					"delayTime": {						"type": "string",						"format": "time",						"default": 0						}				},				"triggerEnableTime": {					"description": "option: available only when trigger is not tripped.  window of scenario time when the trigger is enabled to be tripped",					"startTime": {						"type": "string",						"format": "time",						"default": 0						},					"stopTime": {						"type": "string",						"format": "time"						}				},				"triggerActivities": {					"description": "optional: activities that start when trigger activated",					"type": "array",					"items": {						"$ref": "#/definitions/activityItem"					},					"additionalItems": false				},				"triggerActive": {					"description": "optional: controls trigger active - used to control xevent used",					"type": "boolean",					"default":true				},				"repeat": {					"description": "optional: allows trigger to be tripped again",					"type": "boolean",					"default":false				}			},			"required": [				"triggerId",				"triggerName",				"triggerAction"			],			"additionalProperties": false		},		"stressItem": {			"description": "an item of stress (an experience) that can be used to set the difficulty of an xEvent",			"type": "object",			"properties": {				"stressorId": {					"description": "required: a unique local stressor identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"stressor": {					"description": "required: the stressor strategy, script or instruction itself",					"type": "integer"				},				"stressClass": {					"description": "optional: the class of stress - based on 'Cooper's Code'",					"type": "string",					"enum": ["white","yellow","orange","red","black"]				},				"stressLevel": {					"description": "optional: the quantitative level of stress",					"type": "number"				},				"stressorType": {					"description": "required: the category of stress being enacted - from army stress handbook",					"type": "string",					"enum": [						"cognitive",						"environmental",						"physiological",						"affective"					]				},				"stressorPresence": {					"description": "required: how long does the stressor remain enacted while xEvent activated",					"type": "string",					"enum": ["momentary", "permanent"]				},				"stressPoints": {					"description": "required: the number of points in a difficulty index the stressor adds to for a team or individual when experienced",					"type": "number"				}			},			"required": [				"stressor",				"stressorType",				"stressorPresence",				"stressPoints"			]		},		"performer": {			"type": "object",			"properties": {				"teamId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"roleId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				}			},			"additionalProperties": false		},		"taskItem": {			"type": "object",			"properties": {				"taskId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"tgtPerformers": {					"type": "array",					"items": {						"$ref": "#/definitions/performer"					},					"additionalItems": false				}			},			"additionalProperties": false,			"required": [				"taskId",				"tgtPerformers"			]		},		"teamItem": {			"type": "object",			"properties": {				"teamSkillId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"tgtPerformers": {					"type": "array",					"items": {						"$ref": "#/definitions/performer"					},					"additionalItems": false				}			},			"additionalProperties": false,			"required": [				"teamSkillId",				"tgtPerformers"			]		},		"affectItem": {			"type": "object",			"properties": {				"affectId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"tgtPerformers": {					"type": "array",					"items": {						"$ref": "#/definitions/performer"					},					"additionalItems": false				}			},			"additionalProperties": false,			"required": [				"affectId",				"tgtPerformers"			]		},		"strategyItem": {			"type": "object",			"properties": {				"strategyId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"strategyInputs": {					"type": "string"				}			},			"additionalProperties": false,			"required": [				"strategyId",				"strategyInputs"			]		},		"activityItem": {			"type": "object",			"properties": {				"activityId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"activityInputs": {					"type": "string"				}			},			"additionalProperties": false,			"required": [				"activityId",				"activityInputs"			]		},		"functionItem": {			"type": "object",			"properties": {				"functionId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"functionInputs": {					"type": "array", 					"items": { 						"type": "string"					}				}			},			"additionalProperties": false,			"required": [				"functionId",				"functionInputs"			]		},		"dataSrcItem": {			"type": "object",			"properties": {				"srcId": {					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				}			},			"additionalProperties": false,			"required": [				"srcId"			]		},		"xEvent": {			"description": "xEvent is a realistic experience used to reliably/consistently prompt, apply and measure taskwork and/or teamwork in different contexts and in different levels of difficulty (stress levels).  Prompts can be synthetic or live/human scripted adaptations or interventions activated through exercise triggers that are 'activated' by targeted actors using various methods",			"type": "object",			"properties": {				"xEventId": {					"description": "required: a unique local xEvent identifier",					"oneOf": [						{							"type": "integer"						},						{							"type": "string"						}					]				},				"xEventUuid": {					"description": "required: the unique global xEvent identifier",					"type": "string"				},				"xEventName": {					"description": "required: the name of this xevent - should be unique in its description",					"type": "string"				},				"xEventType": {					"description": "required: fixed or dynamic - how will this xEvent be injected into exercise",					"type": "string",					"enum": [						"fixed",						"dynamic"					]				},				"startTriggers": {					"description": "required: a list of triggers that can activate this xEvent",					"type": "array",					"minItems": 1,					"items": [						{							"triggerId": {								"oneOf": [									{										"type": "integer"									},									{										"type": "string"									}								]							}						}					],					"additionalItems": true				},				"endTriggers": {					"description": "required: a list of triggers that can deactivate this xEvent",					"type": "array",					"minItems": 1,					"items": [						{							"triggerId": {								"oneOf": [									{										"type": "integer"									},									{										"type": "string"									}								]							}						}					],					"additionalItems": true				},				"taskwork": {					"description": "optional: the performers and taskwork to perform",					"type": "array",					"items": {						"$ref": "#/definitions/taskItem"					},					"additionalItems": false				},				"teamwork": {					"description": "optional: the team tasks and target teams to perform them",					"type": "array",					"items": {						"$ref": "#/definitions/teamItem"					},					"additionalItems": false				},								"affects": {					"description": "optional: the affective states to demonstrate and incorporate into taskwork and teamwork",					"type": "array",					"items": {						"$ref": "#/definitions/affectItem"					},					"additionalItems": false				},								"strategies": {					"description": "optional: pointers to strategies to activate multiple activities and/or functions.",					"type": "array",					"items": {						"$ref": "#/definitions/strategyItem"					},					"additionalItems": false				},				"activities": {					"description": "optional: pointers to script(s) to activate to activate prompts, behaviors, adaptations, interventions",					"type": "array",					"items": {						"$ref": "#/definitions/activityItem"					},					"additionalItems": false				},				"dataSources": {					"description": "optional: data evaluation sources to help measure xevent performance",					"items": {						"$ref": "#/definitions/dataSrcItem"											},					"additionalItems": false				},				"dataFunctions": {					"description": "optional: TSS function(s) to activate to automate data collection",					"type": "array",					"items": {						"$ref": "#/definitions/functionItem"											},					"additionalItems": false				},				"initDifficulty": {					"description": "optional: an baseline difficulty level (complexity) of the xEvent initially before or without any additional difficuty/complexity or stress items (activities) being enabled",					"level": {							"type": "string",							"enum": [								"Easy",								"Moderate",								"Hard"							]					}				},				"stressLevel": {					"description": "optional: the stress level of the xEvent is a roll-up of the included activities that are triggered at start - does not include additional stress items/activities inserted by OCT - but those are accounted for in xAPI report.",					"level": {							"type": "string",							"enum": [								"Low",								"Medium",								"High"							]					},					"additionalItems": false				},				"authors": {					"description": "required: the author(s) of this xEvent - including changes - to aid in translation or further description matters.  Should be automated by EDT",					"type": "array",					"items": {						"$ref": "#/definitions/author"					},					"additionalItems": false				},				"status": {					"description": "required: the status of this xEvent to aid in query or selection.  Should be automated using external review tools",					"type": "object",					"properties": {						"state": {							"type": "string",							"enum": [								"Draft",								"Approved",								"UpdateInProgress",								"Deprecated"							]						},						"stateDate": {							"type": "string",							"format": "date"						}					},					"required": [						"state",						"stateDate"					],					"additionalProperties": false				},				"changes": {					"description": "optional: the list of any changes made to master xEvent - should be automated using EDT",					"type": "array",					"items": [						{							"$ref": "#/definitions/change"						}					],					"additionalItems": false				},				"references": {					"description": "required: the tactical doctrine and/or battle drill this xEvent is intended to exercise and help measure",					"type": "array",					"items": {						"referenceId": {							"oneOf": [								{									"type": "integer"								},								{									"type": "string"								}							]						}					},					"additionalItems": false				}			},			"required": [				"xEventId",				"xEventName",				"startTriggers",				"endTriggers",				"status"			],			"additionalProperties": false		}	}}