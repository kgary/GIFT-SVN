/**
 * Copyright Dignitas Technologies, LLC
 * 
 * This file and its contents are governed by one or more distribution and
 * copyright statements as described in the LICENSE.txt file distributed with
 * this work.
 */
package mil.arl.gift.common.gwt.shared;

import com.google.gwt.user.client.rpc.IsSerializable;

import mil.arl.gift.common.io.Constants;

/**
 * This class contains utility methods to be used on for a GWT component (client or server).
 *
 * @author mhoffman
 *
 */
public class DocumentUtil implements IsSerializable {

    public static final String EMBED_PARAMETER = "embed";
    public static final String PASSWORD_PARAMETER = "password";
    public static final String USERNAME_PARAMETER = "username";
    public static final String LOGIN_AS_USERNAME_PARAMETER = "loginAs";
    public static final String USERID_PARAMETER = "userId";
    public static final String COURSE_RUNTIME_ID_PARAMETER = "courseRuntimeId";
    public static final String COURSE_SOURCE_ID_PARAMETER = "courseSourceId";
    public static final String PINGONLY_PARAMETER = "pingOnly";
    public static final String OFFLINE_PARAMETER = "offline";
    public static final String LTI_CONSUMER_KEY = Constants.LTI_CONSUMER_KEY;
    public static final String LTI_CONSUMER_ID = Constants.LTI_CONSUMER_ID;
    public static final String LTI_COURSE_ID = Constants.LTI_COURSE_ID;
    public static final String LTI_DATA_SET_ID = Constants.LTI_DATA_SET_ID;
    public static final String LTI_OUTCOME_SERVICE_URL = Constants.LTI_OUTCOME_SERVICE_URL;
    public static final String LTI_OUTCOME_SERVICE_SOURCEDID = Constants.LTI_OUTCOME_SERVICE_ID;
    public static final String DEBUG_PARAMETER = "debug";
    public static final String USER_SESSION_ID_PARAMETER = "userSessionId";
    
    /** the debug parameter value to enable debug mode */
    public static final String DEBUG_ENABLED_VALUE = "1";
    
    private static final String INVALID_NAME_REG_EXPRESSION = "The name can't contain any of the following characters: <br/>"
                                + "\\ / : * ? \" < > | # % [ ]";

    private static final String INVALID_NAME_PERIODS = "The name can't consist of periods alone.";

    /**
     * Escapes all the HTML tags in a given string
     *
     * @param html A string containg the HTML to be encoded
     * @return A string with all HTML tags escaped (i.e. <Html> &lt;Html&gt;)
     */
    public static String escapeHTML(String html) {
        if(html != null){
            return html.replace( "/&/g", "&amp;" )
                               .replace( "/%20/g", "&nbsp;" )
                               .replace( "/</g", "&lt;" )
                               .replace( "/>/g", "&gt;" );
         }else{
             return html;
         }
      }
    //ORIGINAL METHOD WHEN THIS WAS IN gwt.client package
//    public static native String escapeHTML(String html) /*-{
//        if(html){
//            return html.replace( /&/g, '&amp;' )
//                               .replace( /%20/g, '&nbsp;' )
//                               .replace( /</g, '&lt;' )
//                               .replace( />/g, '&gt;' );
//         }else{
//             return html;
//         }
//    }-*/;


    /**
     * Unescapes any HTML within the given string, i.e &lt;Html&gt; = <Html>
     *
     * @param text The text containing the escaped HTML
     * @return the text with the HTML unescaped
     */
    public static String unescapeHTML(String text){
            if(text != null){
                return text.replace( "&amp;", "&" )
                               .replace( "&nbsp;", " ")
                               .replace( "&lt;", "<")
                               .replace( "&gt;", ">");
            }else{
               return text;
            }
    }
    //ORIGINAL METHOD WHEN THIS WAS IN gwt.client package
//    public static native String unescapeHTML(String text) /*-{
//    if(text){
//        return text.replace( new RegExp('&amp;', 'g'), '&' )
//                       .replace( new RegExp('&nbsp;', 'g'), ' ')
//                       .replace( new RegExp('&lt;', 'g'), '<')
//                       .replace( new RegExp('&gt;', 'g'), '>');
//    }else{
//       return text;
//    }
//}-*/;


    /**
     * Converts a string generated by Java into an HTML string maintaining the same spacing and formatting
     *
     * @param javaString the Java string to convert
     * @return the converted string.  Will be an empty string if the parameter is null.
     */
    public static String convertToHtmlString(String javaString){

        if(javaString != null){
            return javaString.replace(Constants.NEWLINE, Constants.HTML_NEWLINE).replace(Constants.TAB, Constants.HTML_TAB);

        } else {
            return "";
        }
    }

	/**
	 * Validates that the file name entered does not contain any illegal
	 * characters that may break it down the line
	 *
	 * @param name file name being validated
	 * @return a message indicating if the name has illegal characters, null if the name is valid
	 */
	public static String validateFileName(String name){
    	String[] arr = name.split("[/:*?\\[\\]\"\\\\<>|#%]", 2);
    	if(arr.length > 1){
    	    return INVALID_NAME_REG_EXPRESSION;
    	}else if(name.matches("\\.+")){
    	    return INVALID_NAME_PERIODS;
    	}else{
    	    return null;
    	}
    }
}
