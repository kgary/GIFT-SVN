<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
             xmlns:g="urn:import:com.google.gwt.user.client.ui"
             xmlns:b="urn:import:org.gwtbootstrap3.client.ui"
             xmlns:b.html="urn:import:org.gwtbootstrap3.client.ui.html">
	<ui:style>

    .closeButton{
        width: 100px;
        height: 30px;
        padding-bottom:0px;
        padding-top:0px;
    }

    .closeButtonFooter{
        padding: 10px 10px 10px 0px;
    }

    .customHeader{
        padding: 10px 0px 0px 10px;
    }
    .titleText{
        font-size: 28px;
        font-weight: bold;
        color: black;
        background-color: transparent;
        line-height: 40px;   /* center text in row, padding had no effect on position of text */
    }
    .warning{
        color: red;
        padding-bottom: 5px;
    }
	.body {
		overflow: auto;
	}
	</ui:style>
    
    <!-- This UI Binder uses gwtbootstrap3.  For more information on GwtBootstrap3 see:  https://github.com/gwtbootstrap3/gwtbootstrap3
         The UI Binder should drive the 'layout' of the widget and typically will be wrapped in a 'container' object.   
         
         It is best practice to not specify 'pixels', direct width, height, etc, but rather allow the bootstrap framework "Grid" system and widgets to manage
         resizing and laying themselves out.  This makes it flexible to support other devices such as mobile.  Also it is best practice
         to keep the 'layout' logic in these UI Binder files rather than in the widget java class.  The widget java class should drive the 
         logic for the widget (but not the layout). It is also best practice to not mix old gwt widgets and bootstrap widgets together as the older widgets don't necessarily handle
         resizing, etc well in the bootstrap framework.
    -->
    <b:Modal title="" b:id="modaldialog" closable="false" fade="true" dataBackdrop="STATIC" dataKeyboard="true" ui:field="dialogModal">
        <!-- When a user views content in an iframe, such as a PDF, the iframe is painted on top of regular page content, regardless of z-index.
        	 This means that the dialog will appear behind the iframe. The easiest fix was to add another iframe to the dialog.
       	-->
        <g:HTMLPanel>
            <iframe class="modalFrame" src=""></iframe>
        </g:HTMLPanel>
        <b:ModalHeader addStyleNames='{style.customHeader}'>
            <b:Row>
                <b:Column size="MD_1">
                    <!-- The java class determins which icon to make visible based on the type of dialog is being shown -->            
                    <b:Icon type="INFO_CIRCLE" ui:field="infoIcon" size="TIMES3"/>
                    <b:Icon type="WARNING" ui:field="warningIcon" size="TIMES3" addStyleNames='{style.warning}'/>
                </b:Column>
                <b:Column size="MD_11">
                    <b:Label text="" ui:field="ctrlTitle" addStyleNames='{style.titleText}'/>                
                </b:Column>
             </b:Row>
        </b:ModalHeader>
        <b:ModalBody addStyleNames='{style.body}'>
             <b.html:Paragraph ui:field="dialogMessage"></b.html:Paragraph>
             <b.html:Paragraph ui:field="dialogAdditionalDetails"></b.html:Paragraph>
        </b:ModalBody>
        <b:ModalFooter addStyleNames='{style.closeButtonFooter}'>
            <b:Button type="PRIMARY" dataDismiss="MODAL" ui:field="okButton" addStyleNames='{style.closeButton}'>Close</b:Button>
        </b:ModalFooter>
            
    </b:Modal>
</ui:UiBinder> 