/**
 * Copyright Dignitas Technologies, LLC
 * 
 * This file and its contents are governed by one or more distribution and
 * copyright statements as described in the LICENSE.txt file distributed with
 * this work.
 */
package mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor;

import java.util.logging.Level;
import java.util.logging.Logger;

import org.gwtbootstrap3.client.ui.Modal;
import org.gwtbootstrap3.client.ui.ModalHeader;

import com.google.gwt.core.client.GWT;
import com.google.gwt.core.client.JavaScriptObject;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;
import com.google.web.bindery.event.shared.binder.EventBinder;
import com.google.web.bindery.event.shared.binder.EventHandler;

import mil.arl.gift.common.enums.SurveyPropertyKeyEnum;
import mil.arl.gift.common.gwt.client.widgets.bootstrap.surveyeditor.SurveyEditMode;
import mil.arl.gift.common.gwt.client.widgets.bootstrap.surveyeditor.SurveyEditorResources;
import mil.arl.gift.common.io.LoadedProgressIndicator;
import mil.arl.gift.common.survey.Survey;
import mil.arl.gift.tools.authoring.server.gat.client.SharedResources;
import mil.arl.gift.tools.authoring.server.gat.client.survey.SurveyRpcService;
import mil.arl.gift.tools.authoring.server.gat.client.survey.SurveyRpcServiceAsync;
import mil.arl.gift.tools.authoring.server.gat.client.util.GatClientUtility;
import mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.AddSurveyDialog.SurveyDialogOption;
import mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.events.SurveyChangeEditMode;
import mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.events.SurveyCloseEvent;
import mil.arl.gift.tools.authoring.server.gat.shared.SurveyReturnResult;


/**
 * A class that encapsulates the survey composer, passes data to and from it, and controls displaying it to the user. The behavior of
 * the survey composer is unique in that only one instance of it exists throughout the entire GAT. This class controls interactions with
 * the global survey composer instance and allows it to be safetly used in all of the GAT's editors, even once in completely separate 
 * iframe windows from the course editor, such as the DKF editor.
 * <br/><br/>
 * This is accomplished by creating a single instance of the survey composer from the base course editor window and then using
 * {@link #exposeNativeFunctions()} to expose a common set of JavaScript functions that other editors can perform on the base 
 * editor window in order to control the course editor's survey composer instance. Because of this, each of this class' public methods
 * redirect to an equivalent 'impl' version of the method that is defined by the base course editor. These public methods
 * should always be preferred for interactions with the survey composer, since they are safe to use across all editors.
 * <br/><br/>
 * A large part of the reason things have been implemented this way is because Java objects created by separate windows will not return
 * 'true' for operations such as == or .equals() because they are generated by separate JRE emulators, which can break a lot of logic
 * in the survey composer, particularly when enums are involved. To safely edit existing surveys from all of the GAT's editors, surveys
 * that need to be edited should be fetched from the GIFT system using this class's public methods and then opened for editing in the survey
 * composer using {@link #initializeAndShow(SurveyDialogOption, AbstractSurveyResources, String, String, SelectSurveyContextCallback)}.
 * 
 * @author nroberts
 */
public class SurveyEditorModal extends Composite implements CloseableInterface {

    private static Logger logger = Logger.getLogger(SurveyEditorModal.class.getName());
    
    private static SurveyEditorModalUiBinder uiBinder = GWT.create(SurveyEditorModalUiBinder.class);

    interface SurveyEditorModalUiBinder extends
            UiBinder<Widget, SurveyEditorModal> {
    }
    
    /** Interface for handling events. */
    interface SurveyEditorModalEventBinder extends EventBinder<SurveyEditorModal> {
    }
    
    /** Create the instance of the event binder (binds the widget for events. */
    private static final SurveyEditorModalEventBinder eventBinder = GWT
            .create(SurveyEditorModalEventBinder.class);    
    
    /** RPC service that is used to retrieve the surveys from the database */
    private final SurveyRpcServiceAsync rpcService = GWT.create(SurveyRpcService.class);
    
    @UiField
    protected Modal surveyObjectModal;
    
    @UiField
    protected ModalHeader modalHeader;
    
    @UiField(provided=true)
    protected SurveyEditorPanel editorPanel = new SurveyEditorPanel(){
        
        @Override
        void onSurveyChangeEditModeEvent(SurveyChangeEditMode event) {
            super.onSurveyChangeEditModeEvent(event);
            
            if(logger.isLoggable(Level.INFO)) {
                logger.info("onSurveyChangeEditModeEvent: " + event);
            }
            
            if (event.getEditMode() == SurveyEditMode.ScoringMode) {
                surveyObjectModal.removeStyleName(STYLE_WRITING);
                surveyObjectModal.addStyleName(STYLE_SCORING);
            } else {
                surveyObjectModal.removeStyleName(STYLE_SCORING);
                surveyObjectModal.addStyleName(STYLE_WRITING);
            }
        }
    };
    
    /** Style class name for when the survey composer is in Writing mode */
    private static final String STYLE_WRITING = "surveyObjectModalStyle";
    
    /** Style class name of when the survey composer is in Scoring mode */
    private static final String STYLE_SCORING = "surveyObjectModalStyleScoring";
    
    /** 
     * The singleton instance of the modal dialog. Only one global instance should be defined by the base course editor for
     * use throughout the entire GAT.
     */
    private static SurveyEditorModal instance = null;

    /**
     * Constructs the survey composer, initializes its widgets, and binds its event handling
     */
    private SurveyEditorModal() {
        
        if(logger.isLoggable(Level.INFO)) {
            logger.info("constructor()");
        }
        
        initWidget(uiBinder.createAndBindUi(this)); 

        eventBinder.bindEventHandlers(this, SharedResources.getInstance().getEventBus());
        
        editorPanel.setCloseableInterface(this);
    }
    
    /**
     * Gets the singleton instance of this class. This method should only be called from the base course editor window to
     * ensure that all of the GAT's editors use the same survey composer instance, even if they are located in different 
     * iframe windows.
     * 
     * @return the singleton instance
     */
    private static SurveyEditorModal getInstance() {
        
        if (instance == null) {
            instance = new SurveyEditorModal();
        }
        
        return instance;
    }

    /**
     * Shows the survey composer to the user so they can edit the loaded survey.
     */
    private void show() {

        surveyObjectModal.show();
        
        //append the modal to the end of the <body> element so that it appears over other editor dialogs
        RootPanel.get().add(surveyObjectModal);
    }

    /**
     * Hides the survey composer from the user so they can no longer edit the loaded survey.
     */
    private void hide() {
        surveyObjectModal.hide();
        RootPanel.get().remove(surveyObjectModal);
    }

    @EventHandler
    protected void onSurveyCloseEvent(SurveyCloseEvent event) {
        
        if(logger.isLoggable(Level.INFO)) {
            logger.info("onSurveyCloseEvent: " + event);
        }
        
        close();
    }
    
    /**
     * Defaults the survey composer's styling to correspond to writing mode.
     */
    private void defaultModalStyle() {
        surveyObjectModal.removeStyleName(STYLE_SCORING);
        surveyObjectModal.addStyleName(STYLE_WRITING);
    }
    
    
    /**
     * Initializes the global survey composer with the survey data and shows it to the user.
     * 
     * @param type - The type of survey that will be edited.
     * @param resources - The global set of survey resources (e.g. survey context, concepts, etc.) that this widget should use
     * @param transitionName - The default transition name for the survey. 
     * @param surveyContextKey - The surveyContextKey assigned for the transition (if any), this can be null or empty.
     * @param callback - The callback for when the survey context has been selected/saved in the survey composer.
     */
    public static native void initializeAndShow(SurveyDialogOption type, 
            AbstractSurveyResources resources, 
            String transitionName, 
            String surveyContextKey, 
            SelectSurveyContextCallback callback)/*-{
                
        var baseEditorWindow = @mil.arl.gift.tools.authoring.server.gat.client.util.GatClientUtility::getBaseEditorWindow()();
                
        baseEditorWindow.surveyEditorInitializeNew(type, resources, transitionName, surveyContextKey, callback);
    }-*/;
    
    /**
     * The base course editor window's implementation of 
     * {@link #initializeAndShow(SurveyDialogOption, AbstractSurveyResources, String, String, SelectSurveyContextCallback)}.
     * This method should only be called from the base course editor's window using a JavaScript function exposed by 
     * {@link #exposeNativeFunctions()} to ensure that it is handled by the global survey composer.
     * 
     * @param type - The type of survey that will be edited.
     * @param resources - The global set of survey resources (e.g. survey context, concepts, etc.) that this widget should use
     * @param transitionName - The default transition name for the survey. 
     * @param surveyContextKey - The surveyContextKey assigned for the transition (if any), this can be null or empty.
     * @param callback - The callback for when the survey context has been selected/saved in the survey editor.
     */
    private static void initializeImpl(SurveyDialogOption type, AbstractSurveyResources resources, String transitionName, String surveyContextKey, 
                               SelectSurveyContextCallback callback) {
        
        if(logger.isLoggable(Level.FINE)) {    
            logger.fine("initialize(" + type + ", " + resources + ", " + transitionName + ", " + surveyContextKey + ", "
                    + callback + ")");
        }
        
        /* Tell the survey editor where it can fetch the media files from the associated course */
        SurveyEditorResources.getInstance().setHostFolderUrl(GatClientUtility.getBaseCourseFolderUrl());
        
        getInstance().defaultModalStyle();
        
        // NOTE: Need to reinitialize the dialog option via its valueOf(String) method in case it was obtained from another window,
        // otherwise == and .equals() operations will fail
        getInstance().editorPanel.initializePanel(SurveyDialogOption.valueOf(type.toString()), resources, transitionName, surveyContextKey, callback);
        
        getInstance().show();
    }
    
    /**
     * Initializes the global survey composer with an existing survey and shows it to the user.
     * <br/><br/>
     * The {@link Survey} passed into this method should be obtained from one of {@link SurveyEditorModal}'s RPC methods, otherwise
     * some of the survey's enums may fail == and .equals() checks if they were generated from a different window. Surveys 
     * obtained from {@link SurveyEditorModal}'s RPC methods are always created from within the course editor window, so they won't
     * encounter this issue.
     * 
     * @param resources - The global set of survey resources (e.g. survey context, concepts, etc.) that this widget should use
     * @param survey - The survey object that should be loaded in the editor.
     * @param transitionName - The default transition name for the survey. 
     * @param surveyContextKey - The surveyContextKey assigned for the transition (if any), this can be null or empty.
     * @param callback - The callback for when the survey context has been selected/saved in the survey composer.
     * @param useOriginal - whether the survey being loaded is the original survey and not a copy of an existing survey or a new survey.
     */
    public static native void initializeAndShow(AbstractSurveyResources resources, Survey survey, String transitionName, String surveyContextKey, 
            SelectSurveyContextCallback callback, boolean useOriginal)/*-{
                
        var baseEditorWindow = @mil.arl.gift.tools.authoring.server.gat.client.util.GatClientUtility::getBaseEditorWindow()();
                
        baseEditorWindow.surveyEditorInitializeExisting(resources, survey, transitionName, surveyContextKey, callback, useOriginal);
    }-*/;

    /**
     * The base course editor window's implementation of 
     * {@link #initializeAndShow(AbstractSurveyResources, Survey, String, String, SelectSurveyContextCallback, boolean)}.
     * This method should only be called from the base course editor's window using a JavaScript function exposed by 
     * {@link #exposeNativeFunctions()} to ensure that it is handled by the global survey composer.
     * <br/><br/>
     * The {@link Survey} passed into this method should be obtained from one of {@link SurveyEditorModal}'s RPC methods, otherwise
     * some of the survey's enums may fail == and .equals() checks if they were generated from a different window. Surveys 
     * obtained from {@link SurveyEditorModal}'s RPC methods are always created from within the course editor window, so they won't
     * encounter this issue.
     * 
     * @param resources - The global set of survey resources (e.g. survey context, concepts, etc.) that this widget should use
     * @param survey - The survey object that should be loaded in the editor.
     * @param transitionName - The default transition name for the survey. 
     * @param surveyContextKey - The surveyContextKey assigned for the transition (if any), this can be null or empty.
     * @param callback - The callback for when the survey context has been selected/saved in the survey editor.
     * @param useOriginal - whether the survey being loaded is the original survey and not a copy of an existing survey or a new survey.
     */
    private static void initializeImpl(AbstractSurveyResources resources, Survey survey, String transitionName, String surveyContextKey, 
                               SelectSurveyContextCallback callback, boolean useOriginal) {
        
        if(logger.isLoggable(Level.INFO)) {
            logger.fine("initialize(" + resources + ", Survey, " + transitionName + ", " + surveyContextKey
                    + ", SurveyContextCallback, " + useOriginal + ")");
        }
        
        /* Tell the survey editor where it can fetch the media files from the associated course */
        SurveyEditorResources.getInstance().setHostFolderUrl(GatClientUtility.getBaseCourseFolderUrl());
        
        getInstance().defaultModalStyle();
        getInstance().editorPanel.initializePanel(resources, survey, transitionName, surveyContextKey, callback, useOriginal);
        
        getInstance().show();
    }

    @Override
    public void close() {
        
        if(logger.isLoggable(Level.INFO)) {
            logger.info("close() called.");
        }
        
        editorPanel.shutdownPanel(new AsyncCallback<Boolean>() {

            @Override
            public void onFailure(Throwable t) {
                
                if(logger.isLoggable(Level.SEVERE)) {
                    logger.severe("Failure shutting down the editor panel: " + t);
                }
                
                hide();  
            }

            @Override
            public void onSuccess(Boolean result) {
                
                if(logger.isLoggable(Level.INFO)) {
                    logger.info("shutdownPanel() returned: " + result);
                }
                
                hide();
            }
            
        });
    }
    
    /**
     * Gets the survey with the given key and survey context key and returns it through the base course editor window,
     * ensuring that it is safe to use in the global survey composer. 
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param key the survey context key for the survey to get
     * @param surveyContextId the survey context to get the survey from
     * @param callback a callback to be invoked once the survey is retrieved.
     */
    public static native void getSurveyFromContextKey(String key, int surveyContextId, AsyncCallback<Survey> callback)/*-{
        
        var baseEditorWindow = @mil.arl.gift.tools.authoring.server.gat.client.util.GatClientUtility::getBaseEditorWindow()();
                
        baseEditorWindow.surveyEditorGetContextSurvey(key, surveyContextId, callback);
    }-*/;
    
    /**
     * The base course editor window's implementation of 
     * {@link #getSurveyFromContextKey(String, int, AsyncCallback)}.
     * This method should only be called from the base course editor's window using a JavaScript function exposed by 
     * {@link #exposeNativeFunctions()} to ensure that it is handled by the global survey composer.
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param key the survey context key for the survey to get
     * @param surveyContextId the survey context to get the survey from
     * @param callback a callback to be invoked once the survey is retrieved.
     */
    private static void getSurveyFromContextKeyImpl(String key, int surveyContextId, AsyncCallback<Survey> callback) {
        if (GatClientUtility.isGIFTWrapMode()) {
            getInstance().rpcService.getSurveyFromExportFile(key, GatClientUtility.getBaseCourseFolderPath(),
                    GatClientUtility.getUserName(), callback);
        } else {
            getInstance().rpcService.getSurveyFromContextKey(key, surveyContextId, callback);
        }
    }
    
    /**
     * Gets the progress of the current survey saving operation and returns it through the base course editor window,
     * ensuring that it's survey is safe to use in the global survey composer. 
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param callback a callback to be invoked once the save progress is retrieved.
     */
    public static native void getSaveSurveyStatus(AsyncCallback<LoadedProgressIndicator<Survey>> callback)/*-{
    
        var baseEditorWindow = @mil.arl.gift.tools.authoring.server.gat.client.util.GatClientUtility::getBaseEditorWindow()();
                
        baseEditorWindow.surveyEditorGetSaveStatus(callback);
    }-*/;
    
    /**
     * The base course editor window's implementation of 
     * {@link #getSaveSurveyStatus(AsyncCallback)}.
     * This method should only be called from the base course editor's window using a JavaScript function exposed by 
     * {@link #exposeNativeFunctions()} to ensure that it is handled by the global survey composer.
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param callback a callback to be invoked once the save progress is retrieved.
     */
    private static void getSaveSurveyStatusImpl(AsyncCallback<LoadedProgressIndicator<Survey>> callback) {
        getInstance().rpcService.getSaveSurveyStatus(GatClientUtility.getUserName(), callback);
    }
    
    /**
     * Gets the survey with the given ID and returns it through the base course editor window,
     * ensuring that it is safe to use in the global survey composer. 
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param surveyId the survey's unique ID
     * @param callback a callback to be invoked once the survey is retrieved.
     */
    public static native void getSurvey(int surveyId, AsyncCallback<SurveyReturnResult> callback)/*-{
        
        var baseEditorWindow = @mil.arl.gift.tools.authoring.server.gat.client.util.GatClientUtility::getBaseEditorWindow()();
                
        baseEditorWindow.surveyEditorGetSurvey(surveyId, callback);
    }-*/;
    
    /**
     * The base course editor window's implementation of 
     * {@link #getSurvey(int, AsyncCallback)}.
     * This method should only be called from the base course editor's window using a JavaScript function exposed by 
     * {@link #exposeNativeFunctions()} to ensure that it is handled by the global survey composer.
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param surveyId the survey's unique ID
     * @param callback a callback to be invoked once the survey is retrieved.
     */
    private static void getSurveyImpl(int surveyId, AsyncCallback<SurveyReturnResult> callback) {
        getInstance().rpcService.getSurveyWithResources(GatClientUtility.getUserName(), surveyId, 
                GatClientUtility.getBaseCourseFolderPath(), callback);
    }
    
    /**
     * Asynchronously saves the given survey to the database and returns it through the base course editor window,
     * ensuring that it is safe to use in the global survey composer. 
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param survey the survey to save
     * @param surveyContextId the unique ID of the survey context that the survey should be saved to in the GIFT system
     * @param callback a callback to be invoked once the survey is saved.
     */
    public static native void saveSurveyAsync(Survey survey, Integer surveyContextId, AsyncCallback<Void> callback)/*-{
        
        var baseEditorWindow = @mil.arl.gift.tools.authoring.server.gat.client.util.GatClientUtility::getBaseEditorWindow()();
                
        baseEditorWindow.surveyEditorSaveAsync(survey, surveyContextId, callback);
    }-*/;

    /**
     * The base course editor window's implementation of 
     * {@link #saveSurveyAsync(Survey, Integer, AsyncCallback)}.
     * This method should only be called from the base course editor's window using a JavaScript function exposed by 
     * {@link #exposeNativeFunctions()} to ensure that it is handled by the global survey composer.
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param survey the survey to save
     * @param surveyContextId the unique ID of the survey context that the survey should be saved to in the GIFT system
     * @param callback a callback to be invoked once the survey is saved.
     */
    private static void saveSurveyAsyncImpl(Survey survey, Integer surveyContextId, AsyncCallback<Void> callback) {
        
        Integer serializedSurveyContextId = null;
        
        if(surveyContextId != null) {
            
            // Nick: For whatever reason, Integers obtained directly from JSNI cannot be serialized for RPC operations directly,
            // so we need to generate an equivalent Integer without using JSNI. This is likely because JavaScript doesn't have
            // an Integer type, so the value returned from JSNI is likely a JavaScript Number.
            serializedSurveyContextId = Integer.valueOf("" + surveyContextId);
        }
        
        /* Keep track of the last course folder that was used to modify the survey. This will be referenced when copying media files */
        survey.getProperties().setPropertyValue(SurveyPropertyKeyEnum.MEDIA_FILE_SOURCE, GatClientUtility.getBaseCourseFolderPath());
        
        getInstance().rpcService.surveyEditorSaveSurveyAsync(survey, serializedSurveyContextId, GatClientUtility.getUserName(), callback);
    }
    
    /**
     * Creates a deep copy of the given survey and returns that copy through the base course editor window,
     * ensuring that it is safe to use in the global survey composer. 
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param survey the survey to copy
     * @param userCopy userCopy if true, remove public from list of visible usernames, otherwise leave it
     */
    public static native Survey deepCopy(Survey survey, boolean userCopy)/*-{
    
        var baseEditorWindow = @mil.arl.gift.tools.authoring.server.gat.client.util.GatClientUtility::getBaseEditorWindow()();
                
        return baseEditorWindow.surveyEditorDeepCopy(survey, userCopy);
    }-*/;
    
    /**
     * The base course editor window's implementation of 
     * {@link #deepCopy(Survey, boolean).
     * This method should only be called from the base course editor's window using a JavaScript function exposed by 
     * {@link #exposeNativeFunctions()} to ensure that it is handled by the global survey composer.
     * <br/><br/>
     * Returning the survey through the base editor window is crucial when loading surveys into the survey composer from 
     * other embedded editors (such as the DKF editor), since enums defined in one window won't return true when calling
     * == or .equals() with enums from another window.
     * 
     * @param survey the survey to copy
     * @param userCopy userCopy if true, remove public from list of visible usernames, otherwise leave it
     */
    private static Survey deepCopyImpl(Survey survey, boolean userCopy) {
        return Survey.deepCopy(survey, GatClientUtility.getUserName(), true);
    }
    
    /**
     * Updates listeners whenever a survey references is selected by the author. This is needed to determine whether surveys
     * for PresentSurvey course objects should be shown in fullscreen.
     *
     * @param reference the reference that was selected
     */
    public static native void onSurveyReferenceSelected(AbstractSurveyReference reference)/*-{
    
        var baseEditorWindow = @mil.arl.gift.tools.authoring.server.gat.client.util.GatClientUtility::getBaseEditorWindow()();
                
        baseEditorWindow.onSurveyReferenceSelected(reference);
    }-*/;
    
    /**
     * The base course editor window's implementation of 
     * {@link #onSurveyReferenceSelected(AbstractSurveyReference)}
     * This method should only be called from the base course editor's window using a JavaScript function exposed by 
     * {@link #exposeNativeFunctions()} to ensure that it is handled by the global survey composer.
     *
     * @param reference the reference that was selected
     */
    private static void onSurveyReferenceSelectedImpl(AbstractSurveyReference reference) {    

        if(logger.isLoggable(Level.INFO)) {
            logger.info("onSurveyReferenceSelected: " + reference);
        }

        getInstance().editorPanel.onSurveyReferenceSelected(reference);
    }
    
    /**
     * Exposes native JavaScript methods to the GAT's base editor window to allow editors in other iframe windows to invoke
     * operations on the same global instance of the survey composer.
     * <br/><br/>
     * This method should ONLY be called from the base course editor window, since the global survey composer instance lives
     * there.
     */
    public static void exposeNativeFunctions() {
        exposeNativeFunctions(GatClientUtility.getBaseEditorWindow());
    }
    
    /**
     * Native implementation of {@link #exposeNativeFunctions()} that attaches JavaScript functions for the global survey composer
     * to the given window.
     * 
     * @param window the window to expose the functions to
     */
    private static native void exposeNativeFunctions(JavaScriptObject window)/*-{
        
        window.surveyEditorInitializeNew = $entry(function(type, resources, transitionName, surveyContextKey, callback){
            @mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.SurveyEditorModal::initializeImpl(
                Lmil/arl/gift/tools/authoring/server/gat/client/view/surveyeditor/AddSurveyDialog$SurveyDialogOption;
                Lmil/arl/gift/tools/authoring/server/gat/client/view/surveyeditor/AbstractSurveyResources;
                Ljava/lang/String;
                Ljava/lang/String;Lmil/arl/gift/tools/authoring/server/gat/client/view/surveyeditor/SelectSurveyContextCallback;)
                (type, resources, transitionName, surveyContextKey, callback);
        });
        
        window.surveyEditorInitializeExisting = $entry(function(resources, survey, transitionName, surveyContextKey, callback, useOriginal){
            @mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.SurveyEditorModal::initializeImpl(
                Lmil/arl/gift/tools/authoring/server/gat/client/view/surveyeditor/AbstractSurveyResources;
                Lmil/arl/gift/common/survey/Survey;
                Ljava/lang/String;
                Ljava/lang/String;
                Lmil/arl/gift/tools/authoring/server/gat/client/view/surveyeditor/SelectSurveyContextCallback;
                Z)
                (resources, survey, transitionName, surveyContextKey, callback, useOriginal);
        });
        
        // Note: The * in the method reference here is a wild card that can be used for any method that only takes one set of
        // parameters (i.e. no identically named method with different parameters exists). In this case the wild card value is used
        // to avoid declaring the class of the generic callback parameter, since JSNI doesn't handle generic references well.
        window.surveyEditorGetContextSurvey = $entry(function(key, surveyContextId, callback){
            @mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.SurveyEditorModal::getSurveyFromContextKeyImpl(*)
            (key, surveyContextId, callback);
        });
        
        // Note: The * in the method reference here is a wild card that can be used for any method that only takes one set of
        // parameters (i.e. no identically named method with different parameters exists). In this case the wild card value is used
        // to avoid declaring the class of the generic callback parameter, since JSNI doesn't handle generic references well.
        window.surveyEditorGetSaveStatus = $entry(function(callback){
            @mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.SurveyEditorModal::getSaveSurveyStatusImpl(*)
            (callback);
        });
        
        // Note: The * in the method reference here is a wild card that can be used for any method that only takes one set of
        // parameters (i.e. no identically named method with different parameters exists). In this case the wild card value is used
        // to avoid declaring the class of the generic callback parameter, since JSNI doesn't handle generic references well.
        window.surveyEditorGetSurvey = $entry(function(id, callback){
            @mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.SurveyEditorModal::getSurveyImpl(*)
            (id, callback);
        });
        
        // Note: The * in the method reference here is a wild card that can be used for any method that only takes one set of
        // parameters (i.e. no identically named method with different parameters exists). In this case the wild card value is used
        // to avoid declaring the class of the generic callback parameter, since JSNI doesn't handle generic references well.
        window.surveyEditorSaveAsync = $entry(function(survey, surveyId, callback){
            @mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.SurveyEditorModal::saveSurveyAsyncImpl(*)
            (survey, surveyId, callback);
        });
        
        window.surveyEditorDeepCopy = $entry(function(survey, userCopy){
            return @mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.SurveyEditorModal::deepCopyImpl(
            Lmil/arl/gift/common/survey/Survey;
            Z)
            (survey, userCopy);
        });
        
        window.onSurveyReferenceSelected = $entry(function(reference){
            return @mil.arl.gift.tools.authoring.server.gat.client.view.surveyeditor.SurveyEditorModal::onSurveyReferenceSelectedImpl(
            Lmil/arl/gift/tools/authoring/server/gat/client/view/surveyeditor/AbstractSurveyReference;)
            (reference);
        });
        
    }-*/;
}
