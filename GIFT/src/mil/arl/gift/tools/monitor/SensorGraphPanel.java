/**
 * Copyright Dignitas Technologies, LLC
 * 
 * This file and its contents are governed by one or more distribution and
 * copyright statements as described in the LICENSE.txt file distributed with
 * this work.
 */
package mil.arl.gift.tools.monitor;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import mil.arl.gift.common.PackageUtil;
import mil.arl.gift.common.sensor.SensorStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is responsible for displaying a learner's sensor graphs.
 *
 * @author mhoffman
 */
public class SensorGraphPanel extends javax.swing.JPanel {

    /** instance of the logger */
    private static Logger logger = LoggerFactory.getLogger(SensorGraphPanel.class);

    /** default serial uid */
    private static final long serialVersionUID = 1L;

    /** property table attribute labels */
    private static final String USER = "User";

    private static final String DOMAIN_SESSION = "Domain Session";

    private static final String SENSOR_TYPE = "Sensor Type";

    /** list model to add sensors too for sensor list */
    private DefaultListModel<Object> sensorListModel = new DefaultListModel<>();

    /** list model to add sensor status messages too */
    private DefaultListModel<String> sensorStatusListModel = new DefaultListModel<>();

    /** table model to add rows/columns too for property table */
    private DefaultTableModel propertyTableModel = new DefaultTableModel() {
        private static final long serialVersionUID = 1L;

        @Override
        public boolean isCellEditable(int rowIndex, int mColIndex) {
            return false;
        }
    };

//    private ImageIcon icon = createImageIcon("images/RDECOM_logo_transparent.png",
//            "RDECOM");

    /** Creates new form SensorGraphPanel */
    public SensorGraphPanel() {
        initComponents();
        sensorList.setModel(sensorListModel);
        sensorStatusList.setModel(sensorStatusListModel);

        //create columns
        propertyTableModel.addColumn("Property");
        propertyTableModel.addColumn("Value");
        propertyTable.getColumnModel().getColumn(0).setMaxWidth(100);
        propertyTable.getColumnModel().getColumn(0).setPreferredWidth(100);

    }

    /** This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sensorListScrollPane = new javax.swing.JScrollPane();
        sensorList = new javax.swing.JList<>();
        sensorGraphPanel = new javax.swing.JPanel();
//        imagePanel = new javax.swing.JPanel(){
//
//            private static final long serialVersionUID = 1L;
//
//            @Override
//            protected void paintComponent(Graphics g)
//            {
//                g.drawImage(icon.getImage(), 0, 0, null);
//                super.paintComponent(g);
//            }
//        };
        propertyTableScrollPane = new javax.swing.JScrollPane();
        propertyTable = new javax.swing.JTable(0,2);
        sensorSelectHintLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sensorStatusList = new javax.swing.JList<>();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setEnabled(false);
        setPreferredSize(new java.awt.Dimension(1028, 750));

        sensorListScrollPane.setPreferredSize(new java.awt.Dimension(258, 200));

        sensorList.setToolTipText("List of available sensors for the monitored user");
        sensorList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sensorListValueChanged(evt);
            }
        });
        sensorListScrollPane.setViewportView(sensorList);

        sensorGraphPanel.setBackground(new java.awt.Color(204, 204, 204));
        sensorGraphPanel.setPreferredSize(new java.awt.Dimension(500, 500));
        sensorGraphPanel.setLayout(new java.awt.GridBagLayout());

//        imagePanel.setBackground(new java.awt.Color(204, 255, 204));
//        imagePanel.setMinimumSize(new java.awt.Dimension(400, 400));
//        imagePanel.setPreferredSize(new java.awt.Dimension(400, 400));
//        imagePanel.setOpaque(false);

//        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
//        imagePanel.setLayout(imagePanelLayout);
//        imagePanelLayout.setHorizontalGroup(
//            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGap(0, 400, Short.MAX_VALUE)
//        );
//        imagePanelLayout.setVerticalGroup(
//            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGap(0, 400, Short.MAX_VALUE)
//        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 150, 50, 150);
//        sensorGraphPanel.add(imagePanel, gridBagConstraints);

        propertyTableScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        propertyTable.setModel(propertyTableModel);
        propertyTable.setToolTipText("User and Sensor Attributes");
        propertyTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        propertyTable.setAutoscrolls(false);
        propertyTable.setColumnSelectionAllowed(true);
        propertyTableScrollPane.setViewportView(propertyTable);
        propertyTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        sensorSelectHintLabel.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        sensorSelectHintLabel.setText("Select a sensor below to display graph");

        sensorStatusList.setToolTipText("Displays status messages from sensors");
        sensorStatusList.setMaximumSize(new java.awt.Dimension(0, 500));
        jScrollPane1.setViewportView(sensorStatusList);

        saveButton.setText("Save");
        saveButton.setActionCommand("saveButton");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(propertyTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(sensorListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(sensorSelectHintLabel)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sensorGraphPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sensorGraphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sensorSelectHintLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sensorListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(propertyTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(clearButton))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        saveButton.getAccessibleContext().setAccessibleName("saveButton");
        clearButton.getAccessibleContext().setAccessibleName("clearButton");
    }// </editor-fold>//GEN-END:initComponents

    private void sensorListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sensorListValueChanged

        changeGraph(sensorList.getSelectedValue());

    }//GEN-LAST:event_sensorListValueChanged

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        //Create a file chooser
        final JFileChooser fc = new JFileChooser(PackageUtil.getOutput());
        fc.setDialogTitle("Save Sensor Status Messages");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new FileFilter() {
            @Override
            public String getDescription() {
                return "txt files";
            }

            @Override
            public boolean accept(File f) {

                if (f.isDirectory()) {
                    return false;
                }

                String extension = f.getName().substring(f.getName().lastIndexOf('.'));
                if (extension != null) {
                    if (extension.equals(".txt")) {
                        return true;
                    }

                    return false;
                }

                return false;
            }
        });

        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File file = fc.getSelectedFile();

            //This is where a real application would open the file.
            logger.debug("User selected to save status messages to " + file.getName());

            PrintWriter pw = null;
            try {

                Object[] entries = ((DefaultListModel<String>) sensorStatusList.getModel()).toArray();
                pw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));

                for (Object entry : entries) {
                    pw.println(entry);
                }

                JOptionPane.showMessageDialog(this, "Saved sensor status messages to " + file.getName(), "Save Successful", javax.swing.JOptionPane.DEFAULT_OPTION);

            } catch (UnsupportedEncodingException e) {
                logger.error("Caught exception while trying to save sensor stats message to file: " + e);
                e.printStackTrace();
            } catch (FileNotFoundException e) {
                logger.error("Caught exception while trying to save sensor stats message to file: " + e);
                e.printStackTrace();
            } finally {

                if (pw != null) {
                    pw.close();
                }
            }

        } else {
            logger.info("Save sensor status messages cancelled by user.");
        }

     }//GEN-LAST:event_saveButtonActionPerformed

     private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed

         ((DefaultListModel<String>) sensorStatusList.getModel()).clear();
         logger.debug("Cleared sensor status messages because clear button was pressed");
         ((DefaultListModel<String>) sensorStatusList.getModel()).addElement(new Date() + ": Cleared sensor status messages");

     }//GEN-LAST:event_clearButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
//    private javax.swing.JPanel imagePanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable propertyTable;
    private javax.swing.JScrollPane propertyTableScrollPane;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel sensorGraphPanel;
    private javax.swing.JList<Object> sensorList;
    private javax.swing.JScrollPane sensorListScrollPane;
    private javax.swing.JLabel sensorSelectHintLabel;
    private javax.swing.JList<String> sensorStatusList;
    // End of variables declaration//GEN-END:variables

    /**
     * Return the Sensor List component
     *
     * @return JList
     */
    public JList<Object> getSensorList() {
        return sensorList;
    }

    /**
     * Reset the panel by clearing out learner sensor information from various
     * components
     */
    public void reset() {
        ((DefaultListModel<Object>) sensorList.getModel()).clear();
        sensorGraphPanel.removeAll();
        propertyTableModel.setRowCount(0);

        repaint();
    }

    /**
     * Add a sensor to the sensor list component
     *
     * @param sensor a sensor graph to add to the panel
     */
    public void addSensor(Object sensor) {
        if (!sensorListModel.contains(sensor)) {
            sensorListModel.addElement(sensor);
        }
    }

    /**
     * Remove a sensor from the sensor list component
     *
     * @param sensor a sensor graph to remove from the panel
     */
    public void removeSensor(Object sensor) {
        sensorListModel.removeElement(sensor);
    }

    /**
     * Add a sensor status message to the panel.
     *
     * @param userId - the user id assigned to the sensor reporting status
     * @param status - the sensor status
     * @param date - the time stamp at which the status message was created
     */
    public void addSensorStatusMessage(int userId, SensorStatus status, String date) {

        logger.debug("Adding sensor status message of " + status.getMessage() + " to list");
        
        String message;
        
        if(status.isErrorMessage()) {
            
             message = date + ": (user " + userId + ") " + status.getSensorName() + " status = ERROR: " + status.getMessage();
            
        } else {
            
            message = date + ": (user " + userId + ") " + status.getSensorName() + " status = " + status.getMessage();
        }
        
        ((DefaultListModel<String>) sensorStatusList.getModel()).addElement(message);
    }

    /**
     * Add a sensor status message to the panel.
     *
     * @param status - the sensor status
     * @param date - the time stamp at which the status message was created
     */
    public void addSensorStatusMessage(SensorStatus status, String date) {

        String message;

        if (status.isErrorMessage()) {

            message = date + ": " + status.getSensorName() + " status = ERROR: " + status.getMessage();

        } else {

            message = date + ": " + status.getSensorName() + " status = " + status.getMessage();
        }

        logger.debug("Adding sensor status message of " + status.getMessage() + " to list");
        ((DefaultListModel<String>) sensorStatusList.getModel()).addElement(message);
    }

    /**
     * Populate the property table
     *
     * @param currentSelectedSensor
     */
    private void populatePropertyTable(Object currentSelectedSensor) {

        //clear previous property values
        if (propertyTableModel.getRowCount() > 0) {
            propertyTableModel.setRowCount(0);
        }

        //populate property values
        setUserId();
        setDomainSessionId();
        setSensorType(currentSelectedSensor);
    }

    /**
     * Set the user id in the property table
     */
    private void setUserId() {
        Integer userId = SensorDataManager.getInstance().getUserId();

        propertyTableModel.addRow(new Object[]{USER, userId != null ? userId : "null"});
    }

    /**
     * Set the domain sesison id in the property table
     */
    private void setDomainSessionId() {
        int dsId = SensorDataManager.getInstance().getDomainSessionId();

        propertyTableModel.addRow(new Object[]{DOMAIN_SESSION, dsId});
    }

    /**
     * Set the sensor type in the property table
     *
     * @param sensor - selected sensor from list
     */
    private void setSensorType(Object sensor) {
        String type = SensorDataManager.getInstance().getSensorType(sensor);

        propertyTableModel.addRow(new Object[]{SENSOR_TYPE, type});
    }

//    /**
//     * Returns an ImageIcon, or null if the path was invalid.
//     *
//     * @param path
//     * @param description
//     * @return
//     */
//    protected ImageIcon createImageIcon(String path,
//            String description) {
//        java.net.URL imgURL = getClass().getResource(path);
//        if (imgURL != null) {
//            return new ImageIcon(imgURL, description);
//        }
//
//        System.err.println("Couldn't find file: " + path);
//        return null;
//    }

    /**
     * Arbitrarily select a graph to display on the graph panel
     */
    public void showAnyGraph() {

        if (sensorList.getModel().getSize() > 0) {
            sensorList.setSelectedIndex(0);
        }
    }

    /**
     * Change the current graph to the graph panel provided
     *
     * @param panel
     */
    private void changeGraph(Object sensor) {

        JPanel panel = SensorDataManager.getInstance().getChartPanel(sensor);
        sensorGraphPanel.removeAll();

        if (panel != null) {
            sensorGraphPanel.add(panel);
        }

        populatePropertyTable(sensor);

        validate();
        repaint();
    }
}
