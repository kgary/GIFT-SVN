/**
 * Copyright Dignitas Technologies, LLC
 * 
 * This file and its contents are governed by one or more distribution and
 * copyright statements as described in the LICENSE.txt file distributed with
 * this work.
 */
package mil.arl.gift.tools.segmentgenerator;

import java.util.HashMap;
import java.util.Map;
import javax.swing.table.DefaultTableModel;

import mil.arl.gift.common.io.ImageUtil;
import mil.arl.gift.common.ta.state.EntityState;
import mil.arl.gift.net.api.message.Message;

/**
 *
 * @author jleonard
 */
public class EntityStatusTableFrame extends javax.swing.JFrame implements DISListener {

    private static final long serialVersionUID = 1L;

    private final Map<Integer, Integer> entityIdToRowIndex = new HashMap<>();

    private final DefaultTableModel entityStatusTableModel =
            new javax.swing.table.DefaultTableModel(
            new Object[][]{},
            new String[]{
                "Entity ID", "Entity Type", "Position", "Orientation", "Posture", "Damage"
            }) {
                private static final long serialVersionUID = 1L;

                Class<?>[] types = new Class<?>[]{
                    java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                };

                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false
                };

                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            };

    /**
     * Creates new form EntityStatusTableFrame
     */
    public EntityStatusTableFrame() {
        initComponents();

        setIconImage(ImageUtil.getInstance().getSystemIcon());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        entityStatusTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        clearMenuItem = new javax.swing.JMenuItem();

        setTitle("Entity List");
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0};
        layout.rowHeights = new int[] {0};
        layout.columnWeights = new double[] {1.0};
        layout.rowWeights = new double[] {1.0};
        getContentPane().setLayout(layout);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 400));

        entityStatusTable.setModel(entityStatusTableModel);
        entityStatusTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(entityStatusTable);
        entityStatusTable.getColumnModel().getColumn(0).setMaxWidth(50);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        fileMenu.setText("File");

        clearMenuItem.setText("Clear");
        clearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(clearMenuItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMenuItemActionPerformed
        DefaultTableModel defaultModel = (DefaultTableModel) entityStatusTable.getModel();
        synchronized (entityIdToRowIndex) {
            entityIdToRowIndex.clear();
            while (defaultModel.getRowCount() > 0) {
                defaultModel.removeRow(0);
            }
        }
    }//GEN-LAST:event_clearMenuItemActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clearMenuItem;
    private javax.swing.JTable entityStatusTable;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void entityStateReceived(Message msg) {
        EntityState es = (EntityState) msg.getPayload();
        DefaultTableModel defaultModel = (DefaultTableModel) entityStatusTable.getModel();
        Integer entityId = es.getEntityID().getEntityID();
        String entityType = es.getEntityType().getEntityKind()
                + "." + es.getEntityType().getDomain()
                + "." + es.getEntityType().getCountry()
                + "." + es.getEntityType().getCategory()
                + "." + es.getEntityType().getSubcategory()
                + "." + es.getEntityType().getSpecific()
                + "." + es.getEntityType().getExtra();
        String position = es.getLocation().getX() + ", " + es.getLocation().getY() + ", " + es.getLocation().getZ();
        String orientation = es.getOrientation().getX() + ", " + es.getOrientation().getY() + ", " + es.getOrientation().getZ();
        String posture = es.getAppearance().getPosture().getDisplayName();
        String damage = es.getAppearance().getDamage().getDisplayName();
        Object[] rowData = new Object[]{entityId, entityType, position, orientation, posture, damage};
        synchronized (entityIdToRowIndex) {
            Integer rowIndex = entityIdToRowIndex.get(es.getEntityID().getEntityID());
            if (rowIndex == null) {
                rowIndex = defaultModel.getRowCount();
                entityIdToRowIndex.put(es.getEntityID().getEntityID(), rowIndex);
                defaultModel.addRow(rowData);
            } else {
                int column = 0;
                for (Object i : rowData) {
                    if (i != null) {
                        defaultModel.setValueAt(i, rowIndex, column);
                    }
                    column += 1;
                }
            }
        }
    }

    @Override
    public void detonationReceived(Message msg) {
    }

    @Override
    public void weaponFireReceived(Message msg) {
    }
}
