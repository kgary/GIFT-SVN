<?xml version="1.0" ?>
<project name="LmsModule" default="compile">
    <property name="root.path" value="../../../../.."/>
    <property name="package.name" value="mil.arl.gift.lms"/>
    <property name="source.path" value="mil/arl/gift/lms"/>
    <property name="jarfile.ext.path" value="gift-lms"/>
    <property name="module.jarfile.name" value="gift-lms.jar"/>
	<property name="services.jarfile.name" value="gift-lms-services.jar"/>
    <property name="gift.common.jar" value="gift-common.jar"/>
	<property name="gift.build.properties" value="${root.path}/config/build.properties"/>
	<property name="build.dependencies" value="${root.path}/config/build.dependencies"/>
	<property name="build.excludes" value="**/gwt/**,**/*.htm,**/*.inf,**/*.jar_HIDE,**/*.war,**/*.dll,**/*.txt,**/*.TXT,**/*.ini"/>
    
    <property name="update.includes" value="**/*.java,**/*.form,**/*.xml,**/*.png,**/*.jpg,**/*.ico,**/*.gif,**/*.html,**/*.css"/>
	
	<loadfile property="build.dependencies.lms" srcFile="${build.dependencies}">
		<filterchain>
			<linecontains>
			    <contains value="@lms@"/>
			</linecontains>
			<replacetokens>
				<token key="lms" value=""/>
			</replacetokens>
		</filterchain>
	</loadfile>
	
    <path id="classpath">
        <fileset dir="${root.path}" includes="${build.dependencies.lms}" excludes="${build.excludes}"/>
    </path>
    
    <target name="checkForChanges">
    	
    	<!-- has the common jar changed since the last jar creation (true = no change, not set = common jar is newer) -->
    	<uptodate property="upToDateWithCommon.ifSet" targetfile="${root.path}/bin/${module.jarfile.name}" srcfile="${root.path}/bin/${gift.common.jar}"/>
        
    	<!-- have the files included in this jar changed since the last jar creation (true = no change, not set = files have changed) -->
    	<uptodate property="upToDateWithIncludes.ifSet" targetfile="${root.path}/bin/${module.jarfile.name}">
            <srcfiles dir="." includes="${update.includes}"/>
        </uptodate>
    	
    	<!-- has the build properties file changed since the last jar creation (true = no change, not set = properties have changed) -->
    	<uptodate property="buildPropertiesUpToDate.ifSet" targetfile="${root.path}/bin/${module.jarfile.name}">
            <srcfiles dir="." includes="${update.includes}"/>
        </uptodate>
    
    	<!-- set property if:
    		1) the build properties have changed
    		or
    		2) the common jar has changed
    		or
    		3) the LMS jar source has changed
    	-->
        <condition property="build.required">
            <or>
            	<not>
            		<isset property="buildPropertiesUpToDate.ifSet" />
            	</not>
            	<not>
                	<isset property="upToDateWithCommon.ifSet"/>
            	</not>
            	<not>
                	<isset property="upToDateWithIncludes.ifSet"/>
            	</not>
            </or>
        </condition>

    </target>

    <target name="compileCore" if="build.required">
    	<echo message="Compiling LMS"/>
        <mkdir dir="${root.path}/build/classes"/>
        <mkdir dir="${root.path}/bin"/>
        <javac debug="on" srcdir="." destdir="${root.path}/build/classes" includeAntRuntime="false" includeDestClasses="false" classpathref="classpath">
            <compilerarg value="-Xlint:-path"/> <!-- needed to silence bad path element warnings from build -->
        </javac>
    	
        <jar destfile="${root.path}/bin/${module.jarfile.name}" basedir="${root.path}/build/classes" includes="${source.path}/**" excludes="${build.excludes}}"/>
    	
    	<!-- create LMS module services jar -->
        <jar destfile="${root.path}/bin/${services.jarfile.name}" 
        	basedir="${root.path}/build/classes" 
        	includes="${source.path}/LMSConnectionsFileHandler**.class,${source.path}/LMSConnectionsManager**.class,${source.path}/LmsModuleProperties**.class,${source.path}/impl/**" 
        	excludes="${build.excludes}"/>
    </target>
    
    <target name="compile" depends="checkForChanges, compileCore"/>
	
    <target name="clean">
        <delete file="${root.path}/bin/${module.jarfile.name}"/>
        <delete dir="${root.path}/build/classes/${source.path}"/>
    </target>
</project>
