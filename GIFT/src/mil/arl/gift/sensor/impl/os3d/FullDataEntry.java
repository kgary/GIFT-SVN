/**
 * Copyright Dignitas Technologies, LLC
 * 
 * This file and its contents are governed by one or more distribution and
 * copyright statements as described in the LICENSE.txt file distributed with
 * this work.
 */
package mil.arl.gift.sensor.impl.os3d;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.Structure;

/**
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings("all")
public class FullDataEntry extends Structure {

    // / C type : InertialLabs_SDK_Lite_DataRawEntry
    public DataRawEntry Raw;
    // / C type : InertialLabs_SDK_Lite_DataCalibratedEntry
    public DataCalibratedEntry Calibrated;
    // / C type : InertialLabs_SDK_Lite_DataQuatEntry
    public DataQuatEntry Quat;
    // / C type : InertialLabs_SDK_Lite_DataExtEntry
    public DataExtEntry Ext;
    // / C type : InertialLabs_SDK_Lite_DataProcessingInfo
    public DataProcessingInfo Processing;

    public FullDataEntry() {
        super();
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("Raw", "Calibrated", "Quat", "Ext", "Processing");
    }

    /**
     * @param Raw C type : InertialLabs_SDK_Lite_DataRawEntry<br>
     * @param Calibrated C type : InertialLabs_SDK_Lite_DataCalibratedEntry<br>
     * @param Quat C type : InertialLabs_SDK_Lite_DataQuatEntry<br>
     * @param Ext C type : InertialLabs_SDK_Lite_DataExtEntry<br>
     * @param Processing C type : InertialLabs_SDK_Lite_DataProcessingInfo
     */
    public FullDataEntry(DataRawEntry Raw, DataCalibratedEntry Calibrated,
            DataQuatEntry Quat, DataExtEntry Ext, DataProcessingInfo Processing) {
        super();
        this.Raw = Raw;
        this.Calibrated = Calibrated;
        this.Quat = Quat;
        this.Ext = Ext;
        this.Processing = Processing;
    }

    public static class ByReference extends FullDataEntry implements
            Structure.ByReference {

    };

    public static class ByValue extends FullDataEntry implements
            Structure.ByValue {

    };

    /**
     * Override the read() method to set the object type into which to read the
     * data for each Union in this class. We need to do this so the Union data
     * will be populated into the correct fields. For example, for the
     * DataRawEntrty class, the incoming data could be read into either the
     * dRaw[] array or into the various attributes of the field1_struct object.
     * We choose the later since then the various acc, gyr and mag values can be
     * accessed more easily.
     */
    @Override
    public void read() {
        super.read();

        Raw.setType(DataRawEntry.field1_struct.class);
        Calibrated.setType(DataCalibratedEntry.field1_struct.class);
        Quat.setType(DataQuatEntry.field1_struct.class);

        // do we need to do this for Ext and Processing unions too? Don't think
        // we'll be using any data from them.
    }
}
