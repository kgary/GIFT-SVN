/**
 * Copyright Dignitas Technologies, LLC
 * 
 * This file and its contents are governed by one or more distribution and
 * copyright statements as described in the LICENSE.txt file distributed with
 * this work.
 */
package mil.arl.gift.sensor.impl.os3d;

import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.WString;
import com.sun.jna.win32.StdCallLibrary.StdCallCallback;

/**
 * JNA Wrapper for library <b>InertialLabs_SDK_Lite</b><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings("all")
public interface InertialLabsInterface extends Library {

    public static final String JNA_LIBRARY_NAME = "InertialLabs_SDK_Lite";

    public static final InertialLabsInterface INSTANCE = (InertialLabsInterface) Native
            .loadLibrary(InertialLabsInterface.JNA_LIBRARY_NAME,
                    InertialLabsInterface.class);

    /**
     * <i>native declaration : line 10</i><br>
     * enum values
     */
    /**
     * <i>native declaration : line 10</i><br>
     * enum values
     */
    public static interface InertialLabs_SDK_Lite_DeviceMode {
        // / <i>native declaration : line 11</i>
        public static final int InertialLabs_SDK_Lite_DeviceModeQuat = 0;
        // / <i>native declaration : line 12</i>
        public static final int InertialLabs_SDK_Lite_DeviceModeRAW = 1;
        // / <i>native declaration : line 13</i>
        public static final int InertialLabs_SDK_Lite_DeviceModeEmulator = 2;
        // / <i>native declaration : line 14</i>
        public static final long InertialLabs_SDK_Lite_DeviceModeForceDWORD = 0xFFFFFFFFL;
    };

    /**
     * <i>native declaration : line 17</i><br>
     * enum values
     */
    /**
     * <i>native declaration : line 17</i><br>
     * enum values
     */
    public static interface InertialLabs_SDK_Lite_ResetMode {
        // / <i>native declaration : line 18</i>
        public static final int InertialLabs_SDK_Lite_ResetModeCold = 0;
        // / <i>native declaration : line 19</i>
        public static final int InertialLabs_SDK_Lite_ResetModeWarm = 1;
        // / <i>native declaration : line 20</i>
        public static final int InertialLabs_SDK_Lite_ResetModeHot = 2;
        // / <i>native declaration : line 21</i>
        public static final long InertialLabs_SDK_Lite_ResetModeForceDWORD = 0xFFFFFFFFL;
    };

    public static final int InertialLabs_SDK_Lite_MAX_DATA_ENTRIES = 32;

    public interface InertialLabs_SDK_Lite_pGetVersion extends Callback {
        int apply();
    };

    public interface ReceiveDataCallback extends StdCallCallback {
        void apply(DataFrame pData, Pointer pUserData);
    };

    public interface iInertialLabs_SDK_Lite_pEnableDump extends Callback {
        byte apply(int iDeviceIndex, byte bDump, Pointer sInFile,
                Pointer sOutFile);
    };

    /**
     * Gets InertialLabs_SDK_Lite API version<br>
     * Original signature : <code>int InertialLabs_SDK_Lite_GetVersion()</code><br>
     * <i>native declaration : line 146</i>
     * 
     * @return the device version
     */
    int iInertialLabs_SDK_Lite_GetVersion();

    /**
     * The first function that you have to call.
     * 
     * If psIniFile is empty - the default "InertialLabs_SDK_Lite.ini" file in
     * the app folder is used.<br>
     * Original signature :
     * <code>int InertialLabs_SDK_Lite_CreateDevice(int, const wchar_t*, int, int)</code>
     * <br>
     * <i>native declaration : line 155</i>
     * 
     * @param iWorksetIndex - the index of the communication workset entry in
     *            the INI file (see InertialLabs_SDK_Lite.ini), i.e. 5 for the
     *            "[WorksetNode_5]" entry.
     * @param psIniFile - full path file name for the INI file.
     * @param iCOMPort - prefered COM port in spite of workset settings
     * @param iIPAddr - prefered IP address in spite of workset settings
     * @return the device index
     */
    int iInertialLabs_SDK_Lite_CreateDevice(int iWorksetIndex,
            WString psIniFile, int iCOMPort, int iIPAddr);

    /**
     * You should close the device when done<br>
     * Original signature :
     * <code>bool InertialLabs_SDK_Lite_CloseDevice(int)</code><br>
     * <i>native declaration : line 159</i>
     * 
     * @param iDeviceIndex index of the device to close
     * @return boolean value
     */
    byte iInertialLabs_SDK_Lite_CloseDevice(int iDeviceIndex);

    /**
     * Acquiring data from device: set the callback procedure. /* /* 1. The
     * packet is received at the same time the device sends it. /* 2. The
     * callback procedure should be sufficiently quick that your PC can finish
     * your callback before the next packet arrives /* For using this you need
     * to create a procedure like "ReceiveDataCallback" and call
     * "InertialLabs_SDK_Lite_SetReceiveDataCallback" with it as a parameter.
     * 
     * @param iDeviceIndex index of the device to get data from
     * @param pUserCallback - the callback procedure;
     * @param pUserData - user-defined parameter that pUserCallback gets as
     *            argument.
     * 
     *            Original signature :
     *            <code>bool InertialLabs_SDK_Lite_SetReceiveDataCallback(int, ReceiveDataCallback, void*)</code>
     * <br>
     *            <i>native declaration : line 169</i>
     * @return boolean value
     */
    byte iInertialLabs_SDK_Lite_SetReceiveDataCallback(int iDeviceIndex,
            InertialLabsInterface.ReceiveDataCallback pUserCallback,
            Pointer pUserData);

    /**
     * Enabling\Disabling dumping data during normal device work or in
     * iInertialLabs_SDK_Lite_ProcessData function calls. sInFile - the input
     * data file (ASCII text, TAB-delimited); sOutFile - the output data file
     * (ASCII text, TAB-delimited);
     * 
     * Input file data format (N = number of sensors connected, F = number of
     * frames recorded, there may be gaps in the frame counter if packets were
     * dropped):
     * 
     * Line 1: <Bitmask of the present sensors> <Frame counter since the device
     * has started> Line 2: <9 raw data fields (AccX, AccY, AccZ, GyrX, GyrY,
     * GyrZ, MagX, MagY, MagZ) for the first present sensor according to the
     * bitmask> ... Line N+1: <9 raw data fields (AccX, AccY, AccZ, GyrX, GyrY,
     * GyrZ, MagX, MagY, MagZ) for the last present sensor according to the
     * bitmask> Line N+2: <Bitmask of the present sensors> <Frame counter since
     * the device has started> Line N+3: <9 raw data fields (AccX, AccY, AccZ,
     * GyrX, GyrY, GyrZ, MagX, MagY, MagZ) for the first present sensor
     * according to the bitmask> ... Line 2*(N+1): <9 raw data fields (AccX,
     * AccY, AccZ, GyrX, GyrY, GyrZ, MagX, MagY, MagZ) for the last present
     * sensor according to the bitmask> ... Line (F-1)*(N+1)+1: <Bitmask of the
     * present sensors> <Frame counter since the device has started> Line
     * (F-1)*(N+1)+2: <9 raw data fields (AccX, AccY, AccZ, GyrX, GyrY, GyrZ,
     * MagX, MagY, MagZ) for the first present sensor according to the bitmask>
     * ... Line F*(N+1): <9 raw data fields (AccX, AccY, AccZ, GyrX, GyrY, GyrZ,
     * MagX, MagY, MagZ) for the last present sensor according to the bitmask>
     * 
     * 
     * Output file data format (N = number of sensors connected, F = number of
     * frames recorded, there may be gaps in the frame counter if packets were
     * dropped):
     * 
     * Line 1: <Bitmask of the present sensors> <Frame counter since the device
     * has started> Line 2: <9 raw data fields (AccX, AccY, AccZ, GyrX, GyrY,
     * GyrZ, MagX, MagY, MagZ) for the first present sensor according to the
     * bitmask> Line 3: <4 components of the orientation quaternion for the
     * first sensor (QuatX, QuatY, QuatZ, QuatW)> ... Line 2N: <9 raw data
     * fields (AccX, AccY, AccZ, GyrX, GyrY, GyrZ, MagX, MagY, MagZ) for the
     * last present sensor according to the bitmask> Line 2N+1: <4 components of
     * the orientation quaternion for the last sensor (QuatX, QuatY, QuatZ,
     * QuatW)> Line 2N+2: <Bitmask of the present sensors> <Frame counter since
     * the device has started> Line 2N+3: <9 raw data fields (AccX, AccY, AccZ,
     * GyrX, GyrY, GyrZ, MagX, MagY, MagZ) for the first present sensor
     * according to the bitmask> Line 2N+4: <4 components of the orientation
     * quaternion for the first sensor (QuatX, QuatY, QuatZ, QuatW)> ... Line
     * 2*(2N+1)-1: <9 raw data fields (AccX, AccY, AccZ, GyrX, GyrY, GyrZ, MagX,
     * MagY, MagZ) for the last present sensor according to the bitmask> Line
     * 2*(2N+1): <4 components of the orientation quaternion for the last sensor
     * (QuatX, QuatY, QuatZ, QuatW)> ... Line (F-1)*(2N+1)+1: <Bitmask of the
     * present sensors> <Frame counter since the device has started> Line
     * (F-1)*(2N+1)+2: <9 raw data fields (AccX, AccY, AccZ, GyrX, GyrY, GyrZ,
     * MagX, MagY, MagZ) for the first present sensor according to the bitmask>
     * Line (F-1)*(2N+1)+3: <4 components of the orientation quaternion for the
     * first sensor (QuatX, QuatY, QuatZ, QuatW)> ... Line F*(2N+1)-1: <9 raw
     * data fields (AccX, AccY, AccZ, GyrX, GyrY, GyrZ, MagX, MagY, MagZ) for
     * the last present sensor according to the bitmask> Line F*(2N+1): <4
     * components of the orientation quaternion for the last sensor (QuatX,
     * QuatY, QuatZ, QuatW)> Original signature :
     * <code>bool iInertialLabs_SDK_Lite_EnableDump(int, bool, const char*, const char*)</code>
     * <br>
     * <i>native declaration : line 219</i>
     * 
     * @param iDeviceIndex the index of the device
     * @param bDump TODO
     * @param sInFile the input data file (ASCII text, TAB-delimited)
     * @param sOutFile he output data file (ASCII text, TAB-delimited)
     * @return boolean value
     */
    byte iInertialLabs_SDK_Lite_EnableDump(int iDeviceIndex, byte bDump,
            String sInFile, String sOutFile);
}
