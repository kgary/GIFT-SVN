/**
 * Copyright Dignitas Technologies, LLC
 * 
 * This file and its contents are governed by one or more distribution and
 * copyright statements as described in the LICENSE.txt file distributed with
 * this work.
 */
package mil.arl.gift.sensor.impl.os3d;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.Structure;
import com.sun.jna.Union;

/**
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings("all")
public class DataRawEntry extends Union {

    // / C type : field1_struct
    public field1_struct field1;
    // / C type : double[10]
    public double[] dRaw = new double[10];

    // / <i>native declaration : line 49</i>
    // / <i>native declaration : line 49</i>
    public static class field1_struct extends Structure {
        // / C type : double[3]
        public double[] dAcc = new double[3];
        // / C type : double[3]
        public double[] dGyr = new double[3];
        // / C type : double[3]
        public double[] dMag = new double[3];
        public double dReserved;

        public field1_struct() {
            super();
        }

        protected List<String> getFieldOrder() {
            return Arrays.asList("dAcc", "dGyr", "dMag", "dReserved");
        }

        /**
         * @param dAcc C type : double[3]<br>
         * @param dGyr C type : double[3]<br>
         * @param dMag C type : double[3]
         * @param dReserved unknown
         */
        public field1_struct(double dAcc[], double dGyr[], double dMag[],
                double dReserved) {
            super();
            if (dAcc.length != this.dAcc.length)
                throw new IllegalArgumentException("Wrong array size !");
            this.dAcc = dAcc;
            if (dGyr.length != this.dGyr.length)
                throw new IllegalArgumentException("Wrong array size !");
            this.dGyr = dGyr;
            if (dMag.length != this.dMag.length)
                throw new IllegalArgumentException("Wrong array size !");
            this.dMag = dMag;
            this.dReserved = dReserved;
        }

        public static class ByReference extends field1_struct implements
                Structure.ByReference {

        };

        public static class ByValue extends field1_struct implements
                Structure.ByValue {

        };
    };

    public DataRawEntry() {
        super();
    }

    // / @param dRaw C type : double[10]
    public DataRawEntry(double dRaw[]) {
        super();
        if (dRaw.length != this.dRaw.length)
            throw new IllegalArgumentException("Wrong array size !");
        this.dRaw = dRaw;
        setType(double[].class);
    }

    // / @param field1 C type : field1_struct
    public DataRawEntry(field1_struct field1) {
        super();
        this.field1 = field1;
        setType(field1_struct.class);
    }

    public static class ByReference extends DataRawEntry implements
            Structure.ByReference {

    };

    public static class ByValue extends DataRawEntry implements
            Structure.ByValue {

    };
}
